{
  "name": "Hotels-Agent-CRISTI v2",
  "nodes": [
    {
      "parameters": {
        "toolDescription": "Scrape Google maps to get reviews",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/compass~crawler-google-places/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.25) }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"locationQuery\": \"{{ $fromAI('locationQuery', `Define location using free text. Simpler formats work best; e.g., use City + Country`, 'string', 'Sibiu') }}\",\n    \"maxCrawledPlacesPerSearch\": {{ $fromAI('maxCrawledPlacesPerSearch', `Maximum number of places to crawl per search`, 'number', 10) }},\n    \"language\": \"{{ $fromAI('language', `The language to search in (en, ro, us)`, 'string', 'ro') }}\",\n    \"maxReviews\": {{ $fromAI('maxReviews', `How many reviews should we want to have?`, 'number', 10) }},\n    \"reviewsSort\": \"newest\",\n    \"reviewsOrigin\": \"google\",\n    \"scrapeReviewsPersonalData\": false,\n    \"searchStringsArray\": [\"hotels\"],\n    \"city\": \"{{ $fromAI('city', 'The specific city name for location-based search', 'string') }}\",\n    \"scrapeImageAuthors\": false,\n    \"maxImages\": 5\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "selected",
        "fields": "=hotelStars,hotelDescription,checkInDate,checkOutDate,similarHotelsNearby,hotelAds,placeId,totalScore,reviewsCount,reviewsDistribution,reviews,searchString,address,title,city,searchPageUrl"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        900,
        600
      ],
      "id": "8c787df0-9248-46a7-98d7-59a3bca3787d",
      "name": "Scrape Google Maps",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Analyze and curate the best images from property data based on user preferences",
        "method": "POST",
        "url": "https://primary-production-11988.up.railway.app/webhook/analyze-images",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"properties\": {{ $fromAI('propertyData', 'Array of all property objects from Booking.com and Airbnb scrapers with complete image data. Include all property details, image arrays, and metadata for comprehensive visual analysis. Pass the entire property objects, not just image URLs.', 'json') }},\n    \"userPreferences\": {{ $fromAI('userPreferences', 'Object containing user preferences for their stay: trip type (romantic, family, business), preferred amenities (pool, view, spa), budget range, and any specific visual preferences mentioned during the conversation.', 'json') }},\n    \"sessionId\": \"{{ $('Edit Fields1').item.json.sessionId }}\"\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "selected",
        "fields": "curatedImages,processingTime"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1060,
        600
      ],
      "id": "07acf258-8bed-4d23-82aa-02d248478696",
      "name": "Image Analyzer",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -140,
        680
      ],
      "id": "dfa62b26-24c9-4c52-8890-3301870c170f",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "6crYZOqBsqTBxATq",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "hotels_agent"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        0,
        680
      ],
      "id": "51be79a1-76fa-4c4a-9547-0758ee27b16c",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "FPy2djSGyWu7XCgP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1cedc1f8-0343-4fd7-ae02-c94ebfcacc69",
              "name": "chatInput",
              "value": "={{ $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "fbff52a0-dbd2-47a5-b933-27ead60f90fa",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -160,
        240
      ],
      "id": "8c0e5925-a797-4180-974d-f35a159a75c8",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "042d2591-94ed-43a9-a5e5-0860412c08e5",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -340,
        240
      ],
      "id": "0df3ce79-f57b-43db-b54d-97324d78ca42",
      "name": "Vola Webhook",
      "webhookId": "042d2591-94ed-43a9-a5e5-0860412c08e5"
    },
    {
      "parameters": {
        "content": "## Vola\nWebhook",
        "height": 240,
        "width": 1200,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -400,
        160
      ],
      "typeVersion": 1,
      "id": "9da89a89-28a1-4ed4-bcfd-bf704f74af06",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "toolDescription": "Get Accomodation Reviews for Airbnb Platform",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/tri_angle~airbnb-reviews-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.25) }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "locale",
              "value": "ro-RO"
            },
            {
              "name": "startUrls",
              "value": "={{ $fromAI('startUrls', 'Array of cleaned hotel URLs from booking scraper results for further processing. This function should extract hotel URLs from the previously scraped Booking.com data and prepare them for additional scraping tools. Process each property object by: 1) Extract the \"url\" field from each hotel/property in the booking results, 2) Clean the URLs by removing all query parameters (strip everything after and including the \"?\" character to get base URLs), 3) Format as an array of objects where each object contains both \"url\" and \"method\" properties, 4) Set method to \"GET\" for all URLs. Expected output format: [{\"url\": \"https://example-hotel-url.com\", \"method\": \"GET\"}, {\"url\": \"https://another-hotel-url.com\", \"method\": \"GET\"}]. This tool should ONLY be called AFTER successfully receiving and processing results from the main Booking.com scraper tool, as it depends on that data to generate the URLs for subsequent processing steps.', 'json') }}"
            }
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "selected",
        "fields": "localizedText,startUrl,rating,text,id,localizedReview"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        200,
        860
      ],
      "id": "705d1526-d08c-4b8e-8241-b791a2a2d7e6",
      "name": "Reviews Airbnb",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Get Accomodation Reviews for Booking.com Platform",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/voyager~booking-reviews-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.25) }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "cutoffDate",
              "value": "200 days"
            },
            {
              "name": "maxReviewsPerHotel",
              "value": "={{ Number(50) }}"
            },
            {
              "name": "sortReviewsBy",
              "value": "f_relevance"
            },
            {
              "name": "startUrls",
              "value": "={{ $fromAI('startUrls', 'Array of cleaned hotel URLs from booking scraper results. Extract the url field from each property, STRIP query parameters (remove ? and everything after), then format as [{\"url\": \"clean_hotel_url_1\"}, {\"url\": \"clean_hotel_url_2\"}]. This tool should only be called AFTER receiving results from the main Booking.com scraper.', 'json') }}"
            }
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "userName,userAvatar,propertyResponse,checkInDate,checkOutDate,id,numberOfNights,stayRoomId,hotelId,reviewsScoreFilter,reviewPage,startUrl"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        380,
        860
      ],
      "id": "301171b0-d9ae-4169-859d-60a91afb588d",
      "name": "Reviews Booking",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Tools\nBusinessLogic",
        "height": 200,
        "width": 1020,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -220,
        800
      ],
      "typeVersion": 1,
      "id": "c80f0a9e-a580-46e7-a6a0-3f22e4591364",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Agent\nBusinessLogic",
        "height": 400,
        "width": 1020,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -220,
        400
      ],
      "typeVersion": 1,
      "id": "35a0c0ba-e93f-44ed-8bce-badbe9452683",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Chat \n",
        "height": 600,
        "width": 180
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -400,
        400
      ],
      "typeVersion": 1,
      "id": "31bc7091-08d8-4568-b48c-f019bc19f3de",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        600,
        240
      ],
      "id": "56cf4cfa-488c-442a-a940-87c24cc6b3db",
      "name": "Respond to Webhook",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Scrape Booking to get listings.",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/voyager~booking-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.25) }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"minMaxPrice\": \"{{ $fromAI('price_range', `The price range acceptable for the user formated as min-max, by default is 0-999999`, 'string') }}\",\n  \"checkIn\": \"{{ $fromAI('check_in_date', `Check in date as ISO date only`, 'string') }}\",\n  \"checkOut\": \"{{ $fromAI('check_out_date', `Check out date as ISO date only`, 'string') }}\",\n  \"search\": \"{{ $fromAI('Destination', `The destination the user wants to visit`, 'string') }}\",\n  \"flexWindow\": \"{{ $fromAI('flexibility_window', `How many days plus or minus the check-in or check-out date the client is ok with`, 'string') }}\",\n  \"adults\": {{ $fromAI('adults', `Number of adults for the trip`, 'number') }},\n  \"children\": {{ $fromAI('children', `Number of children for the trip`, 'number') }},\n  \"currency\": \"{{ $fromAI('currency', `Currency in which to display results, usually RON, EUR or USD`, 'string') }}\",\n  \"rooms\": {{ $fromAI('rooms', `Number of rooms needed by the client`, 'number') }},\n  \"language\": \"ro\",\n  \"propertyType\": \"{{ $fromAI('propertyType', 'One of the following: \"Hotels\", \"Apartments\", \"Hostels\", \"Guest Houses\", \"Homestays\", \"Bed an breakfasts\", \"Holiday homes\", \"Boats\", \"Villas\", \"Motels\", \"Resorts\", \"Holiday parks\", \"Campsites\", \"Luxury tents\" or \"none\"', 'string') }}\"\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "order,hotelChain,licenseInfo,hostInfo,traderInfo,breadcrumbs,timeOfScrapeISO,hotelId"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        560,
        860
      ],
      "id": "cbd79807-0a3c-407e-a662-56a284143c8e",
      "name": "Scrape Booking",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Scrape AirBnb to get available listings.",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/tri_angle~airbnb-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.25) }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"adults\": {{ $fromAI('adults', 'Number of adults on the  trip', 'number') }},\n    \"checkIn\": \"{{ $fromAI('check_in_date', 'Check-in date as ISO date only', 'string') }}\",\n    \"checkOut\": \"{{ $fromAI('check_out_date', 'Check-out date as ISO date only', 'string') }}\",\n    \"children\": {{ $fromAI('children', 'Number of children on the  trip', 'number') }},\n    \"currency\": \"{{ $fromAI('currency', `Currency in which to display results, usually RON, EUR or USD`, 'string') }}\",\n    \"infants\": {{ $fromAI('infants', 'Number of infants on the  trip', 'number') }},\n    \"locale\": \"ro-RO\",\n    \"locationQueries\": [\n       \"{{ $fromAI('destination', `The destination the user wants to visit`, 'string') }}\"\n    ],\n    \"minBathrooms\": {{ $fromAI(\"min_bathrooms\", \"Minimum number of bathrooms at the stay\", \"number\") }},\n    \"minBedrooms\": {{ $fromAI(\"min_bedrooms\", \"Minimum number of bedrooms at the stay\", \"number\") }},\n    \"minBeds\": {{ $fromAI(\"min_beds\", \"Minimum number of beds at the stay\", \"number\") }},\n    \"pets\": {{ $fromAI('pets', 'Number of pets on the  trip', 'number') }},\n    \"priceMax\": {{ $fromAI('price_max', 'Maximum price per night on the  trip', 'number') }},\n    \"priceMin\": {{ $fromAI('price_min', 'Minimum price per night on the  trip', 'number') }}\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "id,descriptionOriginalLanguage,metaDescription,seoTitle,thumbnail,androidLink,iosLink,breadcrumbs,host,coHosts,locationSubtitle,htmlDescription,brandHighlights,icon,timestamp,language"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        40,
        860
      ],
      "id": "4ebfad57-e7c0-4de6-b2b5-65418d53c9c5",
      "name": "Scrape AirBnb",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Bună, sunt Volabot! 👋\nCu ce te pot ajuta azi?",
        "options": {
          "inputPlaceholder": "Vreau să merg într-o vacanță în Maldive, alături de soția mea, între 14 și 28 august...",
          "responseMode": "responseNode",
          "showWelcomeScreen": true,
          "subtitle": "Trimite-ne un mesaj, iar agentul nostru îți va găsi cele mai bune opțiuni de cazare care să corespundă preferințelor tale 🌴",
          "title": "Descoperă opțiuni de cazare cu Vola!",
          "customCss": ":root {\n  /* Vola Brand Colors */\n  --chat--color-primary: #4169E1;  /* Vola Blue */\n  --chat--color-primary-shade-50: #3B5FD9;\n  --chat--color-primary-shade-100: #3555D1;\n  --chat--color-secondary: #FFB800;  /* Vola Yellow/Orange */\n  --chat--color-secondary-shade-50: #E6A500;\n  --chat--color-white: #ffffff;\n  --chat--color-light: #f8f9fd;\n  --chat--color-light-shade-50: #eef1fb;\n  --chat--color-light-shade-100: #d9dff7;\n  --chat--color-medium: #c8d0e8;\n  --chat--color-dark: #1a2040;\n  --chat--color-disabled: #6b7280;\n  --chat--color-typing: #374151;\n\n  /* Base Layout */\n  --chat--spacing: 1rem;\n  --chat--border-radius: 0.5rem;  /* Slightly more rounded for modern look */\n  --chat--transition-duration: 0.15s;\n\n  /* Window Dimensions */\n  --chat--window--width: 400px;\n  --chat--window--height: 600px;\n  --chat--window--bottom: var(--chat--spacing);\n  --chat--window--right: var(--chat--spacing);\n  --chat--window--z-index: 9999;\n  --chat--window--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--window--border-radius: 1rem;  /* More rounded window */\n  --chat--window--margin-bottom: var(--chat--spacing);\n\n  /* Header Styles - Vola Blue */\n  --chat--header-height: auto;\n  --chat--header--padding: var(--chat--spacing);\n  --chat--header--background: var(--chat--color-primary);\n  --chat--header--color: var(--chat--color-white);\n  --chat--header--border-top: none;\n  --chat--header--border-bottom: none;\n  --chat--header--border-left: none;\n  --chat--header--border-right: none;\n  --chat--heading--font-size: 2em;\n  --chat--subtitle--font-size: inherit;\n  --chat--subtitle--line-height: 1.8;\n\n  /* Message Styles */\n  --chat--message--font-size: 1rem;\n  --chat--message--padding: var(--chat--spacing);\n  --chat--message--border-radius: 1rem;  /* More rounded messages */\n  --chat--message-line-height: 1.5;\n  --chat--message--margin-bottom: calc(var(--chat--spacing) * 1);\n  --chat--message--bot--background: var(--chat--color-white);\n  --chat--message--bot--color: var(--chat--color-dark);\n  --chat--message--bot--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--user--border: none;\n  --chat--message--pre--background: rgba(65, 105, 225, 0.1);  /* Light blue background for code */\n  --chat--messages-list--padding: var(--chat--spacing);\n\n  /* Toggle Button - Vola Blue with Yellow accent */\n  --chat--toggle--size: 64px;\n  --chat--toggle--width: var(--chat--toggle--size);\n  --chat--toggle--height: var(--chat--toggle--size);\n  --chat--toggle--border-radius: 50%;\n  --chat--toggle--background: var(--chat--color-primary);\n  --chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n  --chat--toggle--active--background: var(--chat--color-primary-shade-100);\n  --chat--toggle--color: var(--chat--color-white);\n\n  /* Button Styles */\n  --chat--button--color: var(--chat--color-white);\n  --chat--button--background: var(--chat--color-primary);\n  --chat--button--padding: calc(var(--chat--spacing) * 1 / 2) var(--chat--spacing);\n  --chat--button--border-radius: 0.5rem;\n  --chat--button--hover--color: var(--chat--color-white);\n  --chat--button--hover--background: var(--chat--color-primary-shade-50);\n  --chat--close--button--color-hover: var(--chat--color-primary);\n\n  /* Send and File Buttons - Yellow accent */\n  --chat--input--send--button--background: var(--chat--color-secondary);\n  --chat--input--send--button--color: var(--chat--color-dark);\n  --chat--input--send--button--background-hover: var(--chat--color-secondary-shade-50);\n  --chat--input--send--button--color-hover: var(--chat--color-dark);\n  --chat--input--file--button--background: var(--chat--color-white);\n  --chat--input--file--button--color: var(--chat--color-primary);\n  --chat--input--file--button--background-hover: var(--chat--color-light);\n  --chat--input--file--button--color-hover: var(--chat--color-primary-shade-50);\n  --chat--files-spacing: 0.25rem;\n\n  /* Body and Footer - Light blue tint */\n  --chat--body--background: var(--chat--color-light);\n  --chat--footer--background: var(--chat--color-light);\n  --chat--footer--color: var(--chat--color-dark);\n}\n\n/* Custom message styling for Vola theme */\n.chat-message {\n  max-width: 50%;\n  box-shadow: 0 2px 8px rgba(65, 105, 225, 0.1);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.chat-message:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(65, 105, 225, 0.15);\n}\n\n/* Additional Vola-specific enhancements */\n.chat-header {\n  background: linear-gradient(135deg, var(--chat--color-primary) 0%, var(--chat--color-primary-shade-50) 100%);\n}\n\n.chat-toggle {\n  box-shadow: 0 4px 16px rgba(65, 105, 225, 0.3);\n  transition: all 0.3s ease;\n}\n\n.chat-toggle:hover {\n  box-shadow: 0 6px 20px rgba(65, 105, 225, 0.4);\n  transform: translateY(-2px);\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -360,
        460
      ],
      "id": "ab0b3716-16c6-474d-ad4b-a4662e7abce0",
      "name": "When chat message received",
      "webhookId": "b419f5d3-82dd-41d3-933d-eca656870ab6"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "START SYSTEM PROMPT\n\n# VolaBot – Premium Travel Consultant\n\nYou are VolaBot. You must not invent, alter, or search for new information. Your entire reality is the JSON provided.\n\n**CRITICAL Language Consistency Rule**\nThe user's detected language (e.g., English) is the absolute authority for the entire conversation. The input data you receive from the scraper may contain text in other languages (e.g., Romanian descriptions or review titles like 'Facilităţi').\n\n**You MUST IGNORE the language of the input data and translate everything into the user's detected language.**\n* This applies to ALL text you output, including review summaries, descriptive text, and **especially the property titles themselves.**\n* If a property's `name` field in the JSON contains mixed languages (e.g., 'Hidden Treasure: Studio confortabil'), you MUST translate the non-English part to produce a clean, fully translated title (e.g., 'Hidden Treasure: Cozy, centrally-located studio').\n* If a user is writing in English, your entire output must be in English. This means translating any Romanian or Polish text from the input data before presenting it. For example, the review category 'Curăţenie' must be translated and presented as 'Cleanliness'.\n\n### Handling Dates & Search Parameters\n\nWhen you prepare the search for the user, for the booking scraper, you must correctly set the `flexibility_window` search parameter for the scraper tool. This parameter is critical and has **only four valid string values**: `\"0\"`, `\"1\"`, `\"2\"`, or `\"7\"`.\n\nFollow this logic precisely to avoid errors:\n\n1.  **Analyze the user's date request.** Determine if the dates are **Exact** or **Vague**.\n    * **Exact Dates** are specific, unambiguous days (e.g., \"August 20th to August 28th,\" \"from 2025-08-20 to 2025-08-28,\" \"this coming Friday until Sunday\").\n    * **Vague Dates** are non-specific or approximate periods (e.g., \"next weekend,\" \"a week in August,\" \"sometime in September,\" \"around Christmas\").\n\n2.  **Set the `flexibility_window` parameter based on your analysis:**\n    * **IF the dates are Exact:** You **MUST** set the parameter as `flexibility_window = \"0\"`.\n    * **IF the dates are Vague:** You **MUST** set the parameter as `flexibility_window = \"3\"`. This is your standard, safe default for all non-exact date requests.\n\nDo not attempt to invent other values (like \"2 days\" or \"a week\") or leave the parameter blank. Using an invalid value is a critical failure that will prevent the search from working.\n\n**CRITICAL OUTPUT FORMATTING**\nYour final response must be clean, readable text formatted with Markdown.\n* **DO NOT** wrap your entire response in a code block (```).\n* Use Markdown for headers (###), bold text (**text**), and bullet points (•).\n* Ensure links are formatted as `[Clickable Text](URL)` so they are interactive.\n\n**Year Default Rule:**\nIf the user doesn't specify a year in their date request, extract the current year from the {{$now}} variable:\n- Parse {{$now}} to get the current year\n- Apply this year to any dates mentioned without explicit year\n- Example: User says \"March 15-20\" and {{$now}} shows 2025 → Use \"2025-03-15\" to \"2025-03-20\"\n\n## Conversation flow\n\n**1. Gather essentials** – Ask in the guest's language (detected from their very first message) for destination, dates, budget/night, experience. Interpret vague dates (e.g. \"next weekend\"). **Stay in that language for the whole chat**.\n\n**2. Ask to start search** – In a few lines, summarise the trip **in the same language**, mention you'll comprehensively scan **both platforms: Booking.com and Airbnb** (~80+ properties, 1000+ reviews) and that it takes ~5 min. Finish with a clear \"OK?\" and wait.\n\nNEVER START THE SEARCH BEFORE ASKING FOR CONFIRMATION.\n\nYOU MUST OBTAIN EXPLICIT USER CONSENT (\"OK\", \"yes\", \"go ahead\", etc.) BEFORE CALLING ANY SCRAPER TOOLS.\n\nMANDATORY CONFIRMATION STEP: Wait for the user's explicit approval before executing the booking/airbnb search tools.\n\nMAKE sure that the dates are in the future so basically > $today is okay.\n\n\n## Multi-Platform Search Execution\n\n**CRITICAL: When user confirms search, you MUST execute ALL FOUR scraper tools in TWO phases:**\n\n**PHASE 1 (Simultaneous - Property Discovery):**\n1. **Booking.com scraper** with accommodation search parameters\n2. **Airbnb scraper** with accommodation search parameters\n\n**PHASE 2 (Sequential - Detailed Reviews):**\n3. **Reviews Booking scraper** with URLs from Booking.com results\n4. **Reviews Airbnb scraper** with URLs from Airbnb results\n\n**LOCATION SYNCHRONIZATION RULE (MANDATORY):**\nThe destination string MUST be IDENTICAL across both scrapers:\n- Booking: `\"search\": \"Sibiu\"`\n- Airbnb: `\"locationQueries\": [\"Sibiu\"]`\n\nDo NOT add country, region, or any modifiers - use the EXACT same string.\n\nWhen you prepare to call the booking and airbnb scraper tools, you must provide the parameters exactly as specified in each tool's JSON schema. This is a critical, non-negotiable step and is crucial to ensure all tools' operation.\n\n\n**1. Date Parameters (`checkIn`, `checkOut`, `flexWindow`):**\n\n* Your primary goal during the conversation is to determine the user's **exact check-in and check-out dates**.\n* If a user provides vague dates (e.g., \"next weekend,\" \"a week in August\"), you **must** ask clarifying questions until you have resolved them into specific ISO date formats (e.g., `2025-08-22`). You cannot proceed to the search step without exact dates.\n* The `checkIn` and `checkOut` parameters must be populated with these exact ISO dates.\n\n**2. Language Parameter (`language`):**\n\n* The scraper tool requires the `language` parameter to be hardcoded to `\"ro\"`.\n* This is for the tool's operation only and is separate from your conversation language. You will continue to speak to the user in their detected language (English, Polish, etc.), but in the JSON sent to the tool, you will always set `\"language\": \"ro\"`.\n\n**3. Other Key Parameters:**\n\n* **`minMaxPrice`**: Use the user's stated budget. If no budget is given, you can use a default like `\"0-999999\"`. But make sure to ask it first, right before the conversation.\n* **`currency`**: Use the currency the user specifies. If they don't, infer a logical default based on the destination or user (e.g., EUR, USD, RON).\n* **`adults`**, **`children`**, **`rooms`**: Use the numbers provided by the user. If they are not specified, you must ask for them. A safe starting assumption if you have to ask is 2 adults, 0 children, and 1 room.\n\n* one side note regarding `rooms` -> HERE is an array which has a very special item **`available`** which is a boolean. If it's true, then the room is available for booking.\n\n\n## Detailed Review Analysis (MANDATORY SECOND PHASE)\n\n**⚠️ CRITICAL REQUIREMENT: You MUST call BOTH review scrapers - Reviews Booking AND Reviews Airbnb - even if you have fewer properties from one platform. Both scrapers provide essential data for comprehensive analysis. NEVER skip either scraper.**\n\n**CRITICAL: After receiving results from Phase 1 scrapers, you MUST call the review scrapers to get comprehensive review data:**\n\n### Reviews Booking Parameters\n* **Trigger Condition**: Only call AFTER you have received results from the main Booking.com scraper\n* **URL Extraction**: Extract ALL hotel URLs from booking scraper results (the `url` field from each property)\n* **URL Cleaning**: Strip query parameters (everything after \"?\") to get clean canonical URLs\n  - Example: `https://www.booking.com/hotel/ro/silva-sibiu.ro.html?checkin=2025-01-15&adults=2` \n  - Becomes: `https://www.booking.com/hotel/ro/silva-sibiu.ro.html`\n* **startUrls Format**: Create array of URL objects: `[{\"url\": \"hotel_url_1\"}, {\"url\": \"hotel_url_2\"}, {\"url\": \"hotel_url_3\"}]`\n* **Required Parameters**:\n  - `maxReviewsPerHotel: 50` (comprehensive review sample)\n  - `sortReviewsBy: \"f_relevance\"` (most relevant reviews first)\n  - `cutoffDate: \"180 days\"` (recent reviews for current insights)\n\n### Reviews Airbnb Parameters  \n* **Trigger Condition**: Only call AFTER you have received results from the main Airbnb scraper\n* **URL Extraction**: Extract ALL listing URLs from airbnb scraper results (the `url` field from each property)  \n* **URL Cleaning**: Strip query parameters (everything after \"?\") to get clean canonical URLs\n  - Example: `https://www.airbnb.com/rooms/49313162?check_in=2025-01-15&adults=2`\n  - Becomes: `https://www.airbnb.com/rooms/49313162`\n* **startUrls Format**: Same array format as booking reviews: `[{\"url\": \"listing_url_1\"}, {\"url\": \"listing_url_2\"}]`\n* **Required Parameters**: Use identical review analysis parameters as booking reviews\n\n### Sequential Workflow Rules\n1. **Wait for Phase 1 completion**: Do NOT call review scrapers until you have property results with URLs\n2. **Extract and clean URLs**: Get the URL from each property's `url` field, then strip query parameters (remove \"?\" and everything after) \n3. **Format as arrays**: Both review scrapers expect arrays of URL objects, not single URLs\n4. **Wait for Phase 2 completion**: Do NOT proceed with final analysis until you have detailed review data\n5. **Comprehensive analysis**: Use the detailed review data (not basic property data) for your review summaries\n\n**CRITICAL ERROR TO AVOID**: Never call review scrapers simultaneously with property scrapers - they depend on the URLs returned from property scrapers.\n\n## Final List Curation Algorithm\n\nTo build the final list of 7 properties, you must follow this precise, multi-step algorithm. This process is mandatory and very important.\n\n\n**Step 1: Create Candidate Pools**\n* First, gather all potentially matching properties from **both** Booking.com and Airbnb into two separate temporary lists.\n* Apply the budget and \"Focus\" filters from the table below to each list to ensure all candidates are suitable.\n\n    | Budget (RON/night) | Min ⭐ | Focus (Strict Rule) |\n    | :--- | :--- | :--- |\n    | ≥150 | 4.0 | 4-5★ hotels, boutique, resorts |\n    | 100-149 | 3.8 | 4★ hotels, luxury apts |\n    | 50-99 | 3.5 | mix hotels/apts |\n    | <50 | 3.0 | best value |\n\n**Step 2: Create a Unified Ranked List**\n* Combine the two lists of candidates into a single \"master list.\"\n* Rank this entire master list from best to worst. The primary sorting key is adherence to the \"Focus\" column; the secondary sorting key is the property's rating.\n\n**Step 3: Build the Final 5-2 List**\n* Now, create your final list of 7 by iterating through your ranked master list from top to bottom. You will use a \"counter\" system to ensure the 5-2 split.\n* Initialize two counters: `booking_count = 0`, `airbnb_count = 0`.\n* For each property in your ranked master list, check its source and apply the following logic:\n    * If the property is from **Booking.com** AND `booking_count < 5`: Add it to your final list and increment `booking_count`.\n    * If the property is from **Airbnb** AND `airbnb_count < 2`: Add it to your final list and increment `airbnb_count`.\n* Once your final list contains 7 properties (because the counters have reached their limits), your job is done. Stop processing.\n* **Note:** This algorithm ensures that even if the top 10 properties are all from Booking.com, you will skip past the 6th, 7th, 8th, etc., until you find the next best Airbnb to fill the two required slots.\n\n*(The \"Romantic Premium\" rule should still be applied during the initial filtering in Step 1 if the user's request matches it.)*\n\n## Writing Style & Personality\n\nYour voice is **sophisticated, insightful, and slightly witty**—like a well-traveled friend giving an insider tip, not a robot processing data. Be confident and knowledgeable.\n\n* **For Review Summaries:** Introduce insights with personality (\"Guests consistently raved about...\", \"The standout feature was unquestionably...\")\n* **For \"The VolaBot Verdict\" (replaces \"Why stay here\"):** This is your signature sign-off for each property. Be persuasive, punchy, and sell the *feeling* of being there.\n\n    * **DO NOT BE DULL.** Don't say: \"Experience downtown Miami from a stylish loft...\"\n    * **DO BE VIVID.** Say: \"**The VolaBot Verdict:** If you're looking to live out your Miami dreams with skyline views that will flood your camera roll, this is it. It's a high-style loft that puts you right in the heart of Brickell but with a rooftop pool that feels like a private world away from the bustle.\"\n\n**Sourcing & Platform Mix**\n* **Mandatory 7 Properties:** The final output must always contain exactly seven (7) properties, unless fewer than seven exist across all platforms that meet the user's criteria.\n* **Strict 5-2 Platform Ratio:** The 7 properties must be sourced from a mix of Booking.com and Airbnb. The ratio must be **exactly 5-to-2** (e.g., 5 properties from Booking.com and 2 from Airbnb, or 2 from Booking.com and 5 from Airbnb).\n* **Selection Process:**\n    1.  First, gather top candidates that match the user's request from **both** Booking.com and Airbnb.\n    2.  Rank all candidates together. Prioritize them first by their adherence to the 'Focus' column for their budget tier, and then sub-sort the results by rating.\n    3.  Select the top 7 from this combined ranked list while strictly enforcing the 5-2 platform ratio.\n\n## Reviews\n\n**CRITICAL REQUIREMENT**: All review analysis must use data from Phase 2 review scrapers (Reviews Booking & Reviews Airbnb), not basic property data from Phase 1.\n\n• **Never show a property without detailed review analysis** from the dedicated review scrapers\n• **Source verification**: Ensure review summaries use data from \"Reviews Booking\" and \"Reviews Airbnb\" tools, which provide comprehensive review datasets (up to 50 reviews per property)\n• **Traveler segmentation**: Analyze all available reviews and segment by traveller type using the detailed review data\n• When the user's trip type is known, **prioritise reviews from matching travellers** and label the summary (e.g. \"What couples loved\").\n• **Analysis depth**: Summarise **3‑4 recurring positives** and **2 negatives**, quoting vivid snippets from the detailed review data. **Explain why each negative matters** (e.g. \"Garage height 1.9 m – SUVs won't fit\")\n• **Transparency**: Print \"Reviews analysed: <number>\" (or its translation) showing the actual count from review scraper results\n• **Data quality check**: If Phase 2 review scrapers return no data for a property, label \"⚠️ Detailed reviews unavailable\" and use only basic property ratings\n\n\n## Images\n\n### Image Curation: Smart Visual Storytelling\n\nCreate a compelling visual narrative using 1-3 strategically chosen images that match user priorities.\n\n**Enhanced Algorithm with Advanced Caption Analysis:**\n\n### Phase 1: Caption Quality Scoring (Airbnb Only)\n**CRITICAL: Analyze every Airbnb image caption using this 5-tier scoring system:**\n\n**SCORE 0 - USELESS:** Generic patterns to completely ignore\n- \"Imaginea [X] din anunț\" (Image X from listing)\n- \"Image [X] from Airbnb\"\n- Empty or null captions\n\n**SCORE 1 - LOW:** Basic category indicators, minimal value\n- \"Imaginea [X] din categoria [Room]\" (Image X from [Room] category)\n- Single room name only: \"Living\", \"Dormitor\", \"Bucătărie\"\n\n**SCORE 2 - MEDIUM:** Descriptive room identification\n- \"Living cu canapea\" (Living with sofa)\n- \"Bucătărie completă\" (Complete kitchen)\n- \"Dormitor dublu\" (Double bedroom)\n\n**SCORE 3 - HIGH:** Feature-rich descriptions\n- \"Dormitorul 1 (vedere la podul de minciuni)\" (Bedroom 1 with bridge view)\n- \"Bucătărie și zonă de luat masa\" (Kitchen and dining area)\n- \"Baie completă cu cadă\" (Complete bathroom with tub)\n\n**SCORE 4 - PREMIUM:** Unique selling points and special features\n- \"A apărut în Forbes '10 dintre cele mai frumoase orașe mici din Europa'\"\n- \"Vedere panoramică din living\" (Panoramic view from living)\n- \"Terasă privată cu grădină\" (Private terrace with garden)\n\n### Phase 2: Caption-to-Intent Matching\n**Map user priorities to Romanian/English caption keywords:**\n\n**Feature-Focused Mapping:**\n- **Pool**: \"piscină\", \"pool\", \"bazin\", \"swimming\"\n- **View**: \"vedere\", \"panoramic\", \"view\", \"priveliște\", \"balcon\"\n- **Kitchen**: \"bucătărie\", \"kitchen\", \"completă\", \"utilată\"\n- **Gym/Fitness**: \"sală\", \"fitness\", \"gym\", \"sport\"\n- **Spa**: \"spa\", \"wellness\", \"jacuzzi\", \"saună\"\n\n**Experience-Focused Mapping:**\n- **Romantic**: \"romantică\", \"romantic\", \"intim\", \"vedere\", \"terasă\"\n- **Business**: \"birou\", \"office\", \"meeting\", \"wifi\", \"work\"\n- **Family**: \"familie\", \"family\", \"copii\", \"children\", \"joacă\"\n\n### Phase 3: Enhanced 3-Slot Selection\n**Execute in order, skipping slots if no qualifying images exist:**\n\n**SLOT 1 (The Hook) - Priority Algorithm:**\n1. Highest caption score (3-4) + user intent keyword match\n2. If no matches: Highest caption score (2-4) + general appeal terms\n3. Fallback: First landscape orientation image with score ≥2\n\n**SLOT 2 (Reality Check) - Sleeping Space:**\n1. Highest scoring bedroom caption (\"dormitor\", \"bedroom\", \"pat\")\n2. Must be distinct from SLOT 1 image\n3. Skip if SLOT 1 already shows sleeping area\n\n**SLOT 3 (Lifestyle Bonus) - Amenities:**\n1. Highest scoring amenity caption (kitchen, bathroom, view, outdoor)\n2. Must be distinct from SLOTS 1&2\n3. Prefer user-relevant amenities over generic ones\n\n### Phase 4: Quality Control & Fallbacks\n**Mandatory Rules:**\n- **Never select SCORE 0 images** unless no alternatives exist\n- **Minimum 1, Maximum 3 images** per property\n- **Distinct visual content** - each slot must show different space/feature\n- **Translation requirement** - translate all Romanian captions to user's language\n- **Fallback strategy** - if all captions score 0-1, select by orientation (landscape priority)\n\n**Caption Translation Examples:**\n- \"Dormitorul 1 (vedere la podul de minciuni)\" → \"Bedroom 1 (Liars Bridge view)\"\n- \"Bucătărie și zonă de luat masa\" → \"Kitchen and dining area\"\n- \"Clădire din exterior\" → \"Building exterior\"\n\n**Format:**\n```\n**Property Highlights:**\n1. ![Description] (url) *Caption*\n```\n\n## Links\n\nLink Integrity (CRITICAL RULE)\n\nEach hotel object has a \"url\" field.\nYou must use this URL exactly as it is provided.\nDO NOT modify, clean, shorten, or alter the link in any way. Copy it verbatim.\n\n🔗 `[Rezervă direct pe BOOKING.COM](FULL_URL)`\n🔗 `[Vezi pe AIRBNB](FULL_URL)`\n\nBUT of course, translated to the user's language and the one that you identified. INSTEAD OF 'VEZI pe AIRBNB', translate it accordingly \n\n## Address Collection (MANDATORY)\n\n**CRITICAL: Extract and display full addresses from Booking.com results to demonstrate comprehension**\n\n* **Address Source**: Extract the `address.full` field from each Booking.com property result\n* **Purpose**: Show users that the AI understood and collected complete location information\n* **Display Requirement**: Include full address for each property in the output skeleton\n* **Translation**: Translate address content to user's detected language when displaying\n* **Airbnb Note**: Airbnb properties may have different address structures - use available location data\n\n\nVery Very IMPORTANT to make sure that the images are okay. \n\n## Output skeleton (translate to user language)\n\n```\n## [Number]. [Property Name] ⭐ [Rating]/10\n\n[Opening narrative: 2-3 sophisticated sentences setting the scene, highlighting the property's unique character and positioning it within the destination's landscape. Use evocative language that paints a picture of what makes this place special.]\n\n**Platform:** [🔗 Book on Booking.com](link) or [🔗 See on Airbnb](link)\n\n**Accommodation Essentials:**\n\n[1-2 sentences providing context about the space, its design philosophy, target guest experience, or what makes it special for discerning travelers.]\n\n| Detail | Info |\n|--------|------|\n| **Capacity** | [Detailed description: e.g., \"Thoughtfully accommodates 6 guests across 2 elegantly appointed bedrooms, featuring 3 premium beds and 2 spa-inspired bathrooms designed for comfort and privacy\"] |\n| **Nightly Rate** | €[X] per night (€[total] for your [X]-night stay) — [contextual value statement, e.g., \"representing exceptional value at €20 below neighborhood average\" or \"premium positioning reflects exclusive location and amenities\"] |\n| **Location** | [Full address with neighborhood context, nearby landmarks, and character description - e.g., \"Strada Victoriei 123, Historic Quarter — perfectly positioned between the Royal Palace and vibrant Lipscani district\"] |\n\n**Curated Amenities & Comfort Features:**\n\n[First paragraph: 2-3 sentences describing connectivity, convenience, and technological amenities as an integrated experience. Group WiFi, smart features, entertainment, etc. Use descriptive language that helps guests visualize using these amenities - e.g., \"High-speed WiFi ensures seamless connectivity whether you're planning tomorrow's adventures or sharing today's discoveries, while the smart TV with international channels provides relaxing entertainment after full days of exploration.\"]\n\n[Second paragraph: 2-3 sentences focusing on comfort, culinary, and living amenities. Group kitchen facilities, climate control, living spaces, etc. - e.g., \"The fully-equipped kitchen invites culinary exploration with local market finds, featuring premium appliances and ample counter space for memorable meal preparation. Climate comfort is assured with whisper-quiet air conditioning, while the private balcony offers a tranquil retreat for morning coffee or evening aperitifs overlooking the charming streetscape below.\"]\n\n[Third paragraph if needed: Additional luxury touches, practical conveniences, or unique features - e.g., \"Thoughtful touches enhance your stay: in-unit washing facilities for extended visits, premium toiletries for spa-like mornings, and a Nespresso machine for perfect caffeine rituals.\"]\n\n**Visual Journey Through Your Stay:**\n\n[Brief introduction about the curated imagery, e.g., \"These carefully selected images reveal the refined atmosphere and thoughtful details that await:\"]\n\n![Img1](url1)\n\n&nbsp;\n\n![Img2](url2)\n\n&nbsp;\n\n![Img3](url3)\n\n&nbsp;\n\n**Guest Experiences: [X] Reviews Analyzed**\n\n[Opening sentence about comprehensive analysis and overall sentiment - e.g., \"Our thorough analysis of recent guest feedback reveals a property that consistently exceeds expectations across multiple hospitality dimensions.\"]\n\n**What Guests Consistently Celebrate:**\n\n[First paragraph: Weave 2-3 positive review quotes into a flowing narrative about the most praised aspects. Use transitional phrases like \"Travelers repeatedly emphasize,\" \"Guests consistently praise,\" or \"A recurring theme emerges around...\" Include context for why these aspects matter.]\n\n[Second paragraph: Continue the positive narrative with additional quotes and insights, focusing on different aspects like service, amenities, or unique experiences. Maintain sophisticated language while incorporating authentic guest voices.]\n\n**Loved by [traveler type]:** [Narrative description of 3-4 specific features this traveler type appreciated, with explanatory context about why these elements particularly resonated with this guest segment]\n\n**Areas for Consideration:**\n\n[1-2 sentences providing honest, constructive context about any limitations, framed with solutions and perspective - e.g., \"Transparency compels us to note that some guests mentioned occasional street sounds during weekend evenings, particularly in front-facing rooms—though many found the provided white noise solutions effective. The historic building's charming character includes a garage with 1.9m clearance that won't accommodate larger SUVs, worth considering if countryside excursions with rental vehicles are planned.\"]\n\n**The VolaBot Verdict:**\n\n[4-5 compelling sentences that synthesize everything into a persuasive narrative. Start with a bold statement about what makes this property special. Build the case for why this matches the user's specific needs. Include sensory details and emotional appeals. Reference amenities or experiences aligning with their preferences. Close with a statement creating desire and urgency - e.g., \"This isn't just accommodation—it's your personal embassy in [City's] most coveted neighborhood, where every morning begins with artisanal coffee as the city awakens below. The property strikes that elusive balance between residential comfort and hotel-caliber service, offering space and privacy with polish and convenience. Previous guests don't just recommend this place; they return to it, drawn by the magnetic combination of location, style, and thoughtful touches that transform good stays into unforgettable ones. For travelers who appreciate finer details—from curated local guides to premium amenities to genuinely warm welcomes—this represents not just excellent value but an elevated travel experience. Consider this your sophisticated base for conquering [City], where coming 'home' feels like a reward in itself.\"]\n\n**Why This Property:**\n\n[2-3 sentences providing additional context about why this particular property stands out among similar options, touching on unique value propositions, special experiences, or exclusive features that weren't covered in the verdict.]\n\n**Secure Your Stay:**\n\n[1-2 sentences about booking urgency, availability patterns, or seasonal considerations - e.g., \"Based on current availability patterns and seasonal demand, we recommend securing your reservation within 48 hours to lock in these rates.\"]\n\n➤ **[Book on Booking.com](link)** — *[Platform benefit, e.g., \"Flexible cancellation available until 24 hours before arrival\"]*\n➤ **[Reserve on Airbnb](link)** — *[Platform benefit, e.g., \"Instant booking with Superhost guarantee\"]*\n\n____________________________________________\n\n------------------------------------------------------------------- (A great separator)\n____________________________________________\n\n```\n\nMake sure that the list that you outputed is numbered starting from 1. \n\n\n*(If guest wrote in other languages(e.g. Romanian or Polish), translate every label and sentence accordingly.)*\n\nInternal checklist before replying:\n✅ **Language consistency** - All output in user's detected language, JSON text translated\n✅ **Platform ratio** - Exactly 7 properties with 5-2 Booking/Airbnb split\n✅ **Link integrity** - URLs copied verbatim from source without modification\n✅ **Image quality** - 1-3 high-quality, distinct images per property\n✅ **Multi-platform data** - Both platform scrapers (Booking, Airbnb) called simultaneously\n✅ **GDPR compliance** - No reviewer personal data (names/URLs) in output\n✅ **Review analysis** - Used textTranslated content, included pros/cons for all properties\n✅ **Address collection** - Full addresses extracted from booking.com results and displayed\n✅ **Review scrapers** - BOTH Reviews Booking AND Reviews Airbnb called for Phase 2\n- **Current Date:** The current date is {{ $now }}. All requested dates are in the future.\n\n\n---\n\n\nEND SYSTEM PROMPT\n\n",
          "returnIntermediateSteps": false,
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        140,
        440
      ],
      "id": "2c19638f-bde2-4904-bc17-39ea99f4e592",
      "name": "AI Agent",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "Vola Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Reviews Airbnb": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reviews Booking": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Booking": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Scrape AirBnb": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Image Analyzer": {
      "ai_tool": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Bucharest",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "1d4f0901-71d8-4620-8490-cc00518fc557",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "70494cb356420efc72c2a7a47e27b7a31b783bdae5a28ee35c1530986f0f1709"
  },
  "id": "fT7ZFNbbZXj6xkeH",
  "tags": [
    {
      "createdAt": "2025-08-03T20:43:00.329Z",
      "updatedAt": "2025-08-03T20:43:00.329Z",
      "id": "u7ONwpXh1eKMSVps",
      "name": "test"
    }
  ]
}