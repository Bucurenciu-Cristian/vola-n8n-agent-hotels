{
  "name": "Hotels-Agent-CRISTI",
  "nodes": [
    {
      "parameters": {
        "toolDescription": "Scrape Google maps to get reviews",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/compass~crawler-google-places/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"locationQuery\": \"{{ $fromAI('locationQuery', `Define location using free text. Simpler formats work best; e.g., use City + Country`, 'string', 'Sibiu') }}\",\n    \"maxCrawledPlacesPerSearch\": {{ $fromAI('maxCrawledPlacesPerSearch', `Maximum number of places to crawl per search`, 'number', 10) }},\n    \"language\": \"{{ $fromAI('language', `The language to search in (en, ro, us)`, 'string', 'ro') }}\",\n    \"maxReviews\": {{ $fromAI('maxReviews', `How many reviews should we want to have?`, 'number', 10) }},\n    \"reviewsSort\": \"newest\",\n    \"reviewsOrigin\": \"google\",\n    \"scrapeReviewsPersonalData\": false,\n    \"searchStringsArray\": [\"hotels\"],\n    \"city\": \"{{ $fromAI('city', 'The specific city name for location-based search', 'string') }}\",\n    \"scrapeImageAuthors\": false,\n    \"maxImages\": 5\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "selected",
        "fields": "=hotelStars,hotelDescription,checkInDate,checkOutDate,similarHotelsNearby,hotelAds,placeId,totalScore,reviewsCount,reviewsDistribution,reviews,searchString,address,title,city,searchPageUrl"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        840,
        620
      ],
      "id": "25a3b523-14d4-4726-849c-3cf517e4c7fb",
      "name": "Scrape Google Maps",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        460,
        460
      ],
      "id": "09dc58d7-939a-4d8a-bb69-2f52f6354890",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "6crYZOqBsqTBxATq",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "hotels_agent"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        600,
        460
      ],
      "id": "049d725e-d910-4fd5-bc9d-d06cb14b546b",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "FPy2djSGyWu7XCgP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1cedc1f8-0343-4fd7-ae02-c94ebfcacc69",
              "name": "chatInput",
              "value": "={{ $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "fbff52a0-dbd2-47a5-b933-27ead60f90fa",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        440,
        20
      ],
      "id": "638eb78b-dc7b-4e44-8681-d975f9243e9d",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "042d2591-94ed-43a9-a5e5-0860412c08e5",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        260,
        20
      ],
      "id": "31241b77-2d69-4aeb-978a-d09a48f97f94",
      "name": "Vola Webhook",
      "webhookId": "042d2591-94ed-43a9-a5e5-0860412c08e5"
    },
    {
      "parameters": {
        "content": "## Vola\nWebhook",
        "height": 240,
        "width": 1200,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        200,
        -60
      ],
      "typeVersion": 1,
      "id": "c023f8f9-60de-4fdf-b03f-6c5eb4d94f47",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "toolDescription": "Get Accomodation Reviews for Airbnb Platform",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/tri_angle~airbnb-reviews-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "locale",
              "value": "ro-RO"
            },
            {
              "name": "startUrls",
              "value": "={{ $fromAI('startUrls', 'Array of cleaned hotel URLs from booking scraper results. Extract the url field from each property, STRIP query parameters (remove ? and everything after), then format as [{\"url\": \"clean_hotel_url_1\"}, {\"url\": \"clean_hotel_url_2\"}]. This tool should only be called AFTER receiving results from the main Booking.com scraper.', 'json') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        660,
        640
      ],
      "id": "d13bded2-b91e-42f3-b41b-b1b12d5b27dc",
      "name": "Reviews Airbnb",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Get Accomodation Reviews for Booking.com Platform",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/voyager~booking-reviews-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "cutoffDate",
              "value": "180 days"
            },
            {
              "name": "maxReviewsPerHotel",
              "value": "={{ Number(50) }}"
            },
            {
              "name": "sortReviewsBy",
              "value": "f_relevance"
            },
            {
              "name": "startUrls",
              "value": "={{ $fromAI('startUrls', 'Array of cleaned hotel URLs from booking scraper results. Extract the url field from each property, STRIP query parameters (remove ? and everything after), then format as [{\"url\": \"clean_hotel_url_1\"}, {\"url\": \"clean_hotel_url_2\"}]. This tool should only be called AFTER receiving results from the main Booking.com scraper.', 'json') }}"
            }
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "userName,userAvatar,propertyResponse,checkInDate,checkOutDate,id,numberOfNights,stayRoomId,hotelId,reviewsScoreFilter,reviewPage,startUrl"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1020,
        640
      ],
      "id": "1e5f99e7-e393-4816-b434-68854bceccfb",
      "name": "Reviews Booking",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Tools\nBusinessLogic",
        "height": 200,
        "width": 1020,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        580
      ],
      "typeVersion": 1,
      "id": "1a42e53f-398e-4dec-a9e7-6b2fb9832556",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Agent\nBusinessLogic",
        "height": 400,
        "width": 1020,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        180
      ],
      "typeVersion": 1,
      "id": "9b9b2148-b859-46d6-8691-d57820ac0012",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Chat \n",
        "height": 600,
        "width": 180
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        200,
        180
      ],
      "typeVersion": 1,
      "id": "797ef4ab-16c9-4f25-9952-49324d7004d9",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1200,
        20
      ],
      "id": "0d753129-ce69-4838-9947-6a79febe1322",
      "name": "Respond to Webhook",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Scrape Booking to get listings.",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/voyager~booking-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"minMaxPrice\": \"{{ $fromAI('price_range', `The price range acceptable for the user formated as min-max, by default is 0-999999`, 'string') }}\",\n  \"checkIn\": \"{{ $fromAI('check_in_date', `Check in date as ISO date only`, 'string') }}\",\n  \"checkOut\": \"{{ $fromAI('check_out_date', `Check out date as ISO date only`, 'string') }}\",\n  \"search\": \"{{ $fromAI('Destination', `The destination the user wants to visit`, 'string') }}\",\n  \"flexWindow\": \"{{ $fromAI('flexibility_window', `How many days plus or minus the check-in or check-out date the client is ok with`, 'string') }}\",\n  \"adults\": {{ $fromAI('adults', `Number of adults for the trip`, 'number') }},\n  \"children\": {{ $fromAI('children', `Number of children for the trip`, 'number') }},\n  \"currency\": \"{{ $fromAI('currency', `Currency in which to display results, usually RON, EUR or USD`, 'string') }}\",\n  \"rooms\": {{ $fromAI('rooms', `Number of rooms needed by the client`, 'number') }},\n  \"language\": \"ro\",\n  \"propertyType\": \"{{ $fromAI('propertyType', 'One of the following: \"Hotels\", \"Apartments\", \"Hostels\", \"Guest Houses\", \"Homestays\", \"Bed an breakfasts\", \"Holiday homes\", \"Boats\", \"Villas\", \"Motels\", \"Resorts\", \"Holiday parks\", \"Campsites\", \"Luxury tents\" or \"none\"', 'string') }}\"\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "order,hotelChain,licenseInfo,hostInfo,traderInfo,breadcrumbs,timeOfScrapeISO,hotelId"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1200,
        640
      ],
      "id": "7759e705-144d-4313-9a37-71bc2a81e667",
      "name": "Scrape Booking",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Scrape AirBnb to get available listings.",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/tri_angle~airbnb-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"adults\": {{ $fromAI('adults', 'Number of adults on the  trip', 'number') }},\n    \"checkIn\": \"{{ $fromAI('check_in_date', 'Check-in date as ISO date only', 'string') }}\",\n    \"checkOut\": \"{{ $fromAI('check_out_date', 'Check-out date as ISO date only', 'string') }}\",\n    \"children\": {{ $fromAI('children', 'Number of children on the  trip', 'number') }},\n    \"currency\": \"{{ $fromAI('currency', `Currency in which to display results, usually RON, EUR or USD`, 'string') }}\",\n    \"infants\": {{ $fromAI('infants', 'Number of infants on the  trip', 'number') }},\n    \"locale\": \"ro-RO\",\n    \"locationQueries\": [\n       \"{{ $fromAI('destination', `The destination the user wants to visit`, 'string') }}\"\n    ],\n    \"minBathrooms\": {{ $fromAI(\"min_bathrooms\", \"Minimum number of bathrooms at the stay\", \"number\") }},\n    \"minBedrooms\": {{ $fromAI(\"min_bedrooms\", \"Minimum number of bedrooms at the stay\", \"number\") }},\n    \"minBeds\": {{ $fromAI(\"min_beds\", \"Minimum number of beds at the stay\", \"number\") }},\n    \"pets\": {{ $fromAI('pets', 'Number of pets on the  trip', 'number') }},\n    \"priceMax\": {{ $fromAI('price_max', 'Maximum price per night on the  trip', 'number') }},\n    \"priceMin\": {{ $fromAI('price_min', 'Minimum price per night on the  trip', 'number') }}\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "id,descriptionOriginalLanguage,metaDescription,seoTitle,thumbnail,androidLink,iosLink,breadcrumbs,host,coHosts,locationSubtitle,htmlDescription,brandHighlights,icon,timestamp,language"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        480,
        640
      ],
      "id": "763df74a-85e6-4374-8e06-9cad05ad18cc",
      "name": "Scrape AirBnb",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Bună, sunt Volabot! 👋\nCu ce te pot ajuta azi?",
        "options": {
          "inputPlaceholder": "Vreau să merg într-o vacanță în Maldive, alături de soția mea, între 14 și 28 august...",
          "responseMode": "responseNode",
          "showWelcomeScreen": true,
          "subtitle": "Trimite-ne un mesaj, iar agentul nostru îți va găsi cele mai bune opțiuni de cazare care să corespundă preferințelor tale 🌴",
          "title": "Descoperă opțiuni de cazare cu Vola!",
          "customCss": ":root {\n  /* Vola Brand Colors */\n  --chat--color-primary: #4169E1;  /* Vola Blue */\n  --chat--color-primary-shade-50: #3B5FD9;\n  --chat--color-primary-shade-100: #3555D1;\n  --chat--color-secondary: #FFB800;  /* Vola Yellow/Orange */\n  --chat--color-secondary-shade-50: #E6A500;\n  --chat--color-white: #ffffff;\n  --chat--color-light: #f8f9fd;\n  --chat--color-light-shade-50: #eef1fb;\n  --chat--color-light-shade-100: #d9dff7;\n  --chat--color-medium: #c8d0e8;\n  --chat--color-dark: #1a2040;\n  --chat--color-disabled: #6b7280;\n  --chat--color-typing: #374151;\n\n  /* Base Layout */\n  --chat--spacing: 1rem;\n  --chat--border-radius: 0.5rem;  /* Slightly more rounded for modern look */\n  --chat--transition-duration: 0.15s;\n\n  /* Window Dimensions */\n  --chat--window--width: 400px;\n  --chat--window--height: 600px;\n  --chat--window--bottom: var(--chat--spacing);\n  --chat--window--right: var(--chat--spacing);\n  --chat--window--z-index: 9999;\n  --chat--window--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--window--border-radius: 1rem;  /* More rounded window */\n  --chat--window--margin-bottom: var(--chat--spacing);\n\n  /* Header Styles - Vola Blue */\n  --chat--header-height: auto;\n  --chat--header--padding: var(--chat--spacing);\n  --chat--header--background: var(--chat--color-primary);\n  --chat--header--color: var(--chat--color-white);\n  --chat--header--border-top: none;\n  --chat--header--border-bottom: none;\n  --chat--header--border-left: none;\n  --chat--header--border-right: none;\n  --chat--heading--font-size: 2em;\n  --chat--subtitle--font-size: inherit;\n  --chat--subtitle--line-height: 1.8;\n\n  /* Message Styles */\n  --chat--message--font-size: 1rem;\n  --chat--message--padding: var(--chat--spacing);\n  --chat--message--border-radius: 1rem;  /* More rounded messages */\n  --chat--message-line-height: 1.5;\n  --chat--message--margin-bottom: calc(var(--chat--spacing) * 1);\n  --chat--message--bot--background: var(--chat--color-white);\n  --chat--message--bot--color: var(--chat--color-dark);\n  --chat--message--bot--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--user--border: none;\n  --chat--message--pre--background: rgba(65, 105, 225, 0.1);  /* Light blue background for code */\n  --chat--messages-list--padding: var(--chat--spacing);\n\n  /* Toggle Button - Vola Blue with Yellow accent */\n  --chat--toggle--size: 64px;\n  --chat--toggle--width: var(--chat--toggle--size);\n  --chat--toggle--height: var(--chat--toggle--size);\n  --chat--toggle--border-radius: 50%;\n  --chat--toggle--background: var(--chat--color-primary);\n  --chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n  --chat--toggle--active--background: var(--chat--color-primary-shade-100);\n  --chat--toggle--color: var(--chat--color-white);\n\n  /* Button Styles */\n  --chat--button--color: var(--chat--color-white);\n  --chat--button--background: var(--chat--color-primary);\n  --chat--button--padding: calc(var(--chat--spacing) * 1 / 2) var(--chat--spacing);\n  --chat--button--border-radius: 0.5rem;\n  --chat--button--hover--color: var(--chat--color-white);\n  --chat--button--hover--background: var(--chat--color-primary-shade-50);\n  --chat--close--button--color-hover: var(--chat--color-primary);\n\n  /* Send and File Buttons - Yellow accent */\n  --chat--input--send--button--background: var(--chat--color-secondary);\n  --chat--input--send--button--color: var(--chat--color-dark);\n  --chat--input--send--button--background-hover: var(--chat--color-secondary-shade-50);\n  --chat--input--send--button--color-hover: var(--chat--color-dark);\n  --chat--input--file--button--background: var(--chat--color-white);\n  --chat--input--file--button--color: var(--chat--color-primary);\n  --chat--input--file--button--background-hover: var(--chat--color-light);\n  --chat--input--file--button--color-hover: var(--chat--color-primary-shade-50);\n  --chat--files-spacing: 0.25rem;\n\n  /* Body and Footer - Light blue tint */\n  --chat--body--background: var(--chat--color-light);\n  --chat--footer--background: var(--chat--color-light);\n  --chat--footer--color: var(--chat--color-dark);\n}\n\n/* Custom message styling for Vola theme */\n.chat-message {\n  max-width: 50%;\n  box-shadow: 0 2px 8px rgba(65, 105, 225, 0.1);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.chat-message:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(65, 105, 225, 0.15);\n}\n\n/* Additional Vola-specific enhancements */\n.chat-header {\n  background: linear-gradient(135deg, var(--chat--color-primary) 0%, var(--chat--color-primary-shade-50) 100%);\n}\n\n.chat-toggle {\n  box-shadow: 0 4px 16px rgba(65, 105, 225, 0.3);\n  transition: all 0.3s ease;\n}\n\n.chat-toggle:hover {\n  box-shadow: 0 6px 20px rgba(65, 105, 225, 0.4);\n  transform: translateY(-2px);\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        240,
        240
      ],
      "id": "17762270-637e-4f13-a739-ce79681c69b7",
      "name": "When chat message received",
      "webhookId": "b419f5d3-82dd-41d3-933d-eca656870ab6"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "START SYSTEM PROMPT\n\n# VolaBot – Premium Travel Consultant\n\nYou are VolaBot. You must not invent, alter, or search for new information. Your entire reality is the JSON provided.\n\n## 🔴 CRITICAL RULES\n\n### Language Consistency (MANDATORY)\nThe user's detected language (e.g., English) is absolute authority for the entire conversation. Input data may contain text in other languages (Romanian, Polish, etc.).\n\n**MUST translate ALL content to user's language:**\n* Property titles: 'Studio confortabil' → 'Cozy studio'\n* Review categories: 'Curăţenie' → 'Cleanliness'  \n* All descriptive text and summaries\n\n### Platform Ratio (MANDATORY)\n**Exactly 7 properties with strict 5-2 split (Booking.com : Airbnb)**\n* Algorithm: Rank ALL candidates together → Select top 7 enforcing ratio\n* Never show property without review analysis from Phase 2 scrapers\n\n### Confirmation Required (MANDATORY)\n**NEVER start search before explicit user consent (\"OK\", \"yes\", \"go ahead\")**\n\n### Output Formatting (MANDATORY)\n* Clean Markdown (NO code blocks wrapping entire response)\n* Interactive links: `[Text](URL)`\n* URLs copied verbatim from source data - DO NOT modify\n\n## 🔄 CONVERSATION FLOW\n\n1. **Gather Essentials** (in user's detected language)\n   - Destination, exact dates, budget/night, traveler type\n   - Resolve vague dates to specific ISO format (YYYY-MM-DD)\n\n2. **Search Confirmation**\n   - Summarize parameters in user's language\n   - Mention both platforms scan (~80+ properties, ~5 min)\n   - Wait for explicit \"OK?\" approval\n\n3. **Execute Search** (after confirmation only)\n\n## ⚙️ TECHNICAL PARAMETERS\n\n### Date Parameters\n* **flexibility_window values**: Only `\"0\"`, `\"1\"`, `\"2\"`, `\"7\"`\n* **Exact dates** → `\"0\"`  \n* **Vague dates** → `\"2\"`\n* **checkIn/checkOut**: ISO format required (YYYY-MM-DD)\n\n### Required Parameters\n* **language**: Always `\"ro\"` (tool operation only)\n* **location**: IDENTICAL string across both scrapers\n  - Booking: `\"search\": \"Sibiu\"`\n  - Airbnb: `\"locationQueries\": [\"Sibiu\"]`\n* **budget**: User-specified or ask before search\n* **currency**: User-specified or infer (EUR/USD/RON)\n* **occupancy**: Ask if not provided (default: 2 adults, 0 children, 1 room)\n\n### Search Execution (TWO PHASES)\n**PHASE 1 - Property Discovery (Simultaneous):**\n1. Booking.com scraper with accommodation parameters\n2. Airbnb scraper with accommodation parameters\n\n**PHASE 2 - Review Analysis (Sequential):**\n3. Reviews Booking scraper (extract + clean URLs from Phase 1)\n4. Reviews Airbnb scraper (extract + clean URLs from Phase 1)\n\n**URL Cleaning**: Strip everything after \"?\" \n* `hotel.html?checkin=...` → `hotel.html`\n* Format: `[{\"url\": \"clean_url_1\"}, {\"url\": \"clean_url_2\"}]`\n\n### Quality Filters by Budget\n| Budget/night | Min Rating | Focus |\n|:-------------|:-----------|:------|\n| ≥150 | 4.0 | 4-5★ hotels, boutique |\n| 100-149 | 3.8 | 4★ hotels, luxury apts |\n| 50-99 | 3.5 | mix hotels/apts |\n| <50 | 3.0 | best value |\n\n## 📝 CONTENT CREATION\n\n🔴 **CRITICAL REMINDER: ALL CONTENT MUST BE IN USER'S DETECTED LANGUAGE**\n- If user wrote in Romanian → respond in Romanian\n- If user wrote in English → respond in English  \n- If user wrote in Polish → respond in Polish\n- Translate ALL scraped data (property names, reviews, descriptions) to match user's language\n\n### Review Analysis Requirements\n* **Source**: Use ONLY Phase 2 review scraper data (not basic property data)\n* **Depth**: 3-4 positives + 2 negatives with explanations\n* **Segmentation**: Priority to matching traveler types\n* **Transparency**: Show \"Reviews analyzed: X\" count\n* **Fallback**: If no review data → \"⚠️ Detailed reviews unavailable\"\n\n### Image Curation (Simplified Algorithm)\n**3-Tier Scoring System:**\n* **IGNORE (0)**: Generic/empty captions, \"Image X from listing\"\n* **STANDARD (1)**: Basic room names, descriptive content\n* **PRIORITY (2)**: User intent matches, unique features, views\n\n**Selection Logic:**\n1. **Slot 1**: Highest score + user intent match (pool/view/etc.)\n2. **Slot 2**: Bedroom/sleeping space (if distinct from Slot 1)\n3. **Slot 3**: Amenities/lifestyle features (if distinct)\n\n**Rules**: 1-3 images max, translate captions, distinct content only\n\n### Link Format\n* Booking: `[Book on Booking.com](verbatim_url)`\n* Airbnb: `[See on Airbnb](verbatim_url)`\n* Translate labels to user's language\n\n### Address Collection\n* Extract `address.full` from Booking.com results\n* Display translated full addresses for all properties\n\n## 📋 OUTPUT FORMAT\n\n🔴 **FINAL LANGUAGE CHECK: ENTIRE RESPONSE MUST MATCH USER'S LANGUAGE**\n- Detect user's language from their FIRST message\n- Use that SAME language for the ENTIRE conversation\n- Never mix languages - if user is Romanian, everything in Romanian\n- Never default to English unless user wrote in English\n\n### Property Structure\n```\n## [Number]. Property Name ⭐ X.X/10\n**Platform:** [🔗 Book on Platform](link)\n\n| Detail | Info |\n|--------|------|\n| **Capacity** | X guests, X bedrooms, X beds, X baths |\n| **Price** | €X/night (€X total) *price context* |\n| **Location** | Area • Distance to landmarks |\n| **Address** | Full address from platform |\n| **Amenities** | 🅿️ 🌐 ❄️ 🛁 |\n\n![Image1](url1)\n\n**Top Reviews (X total):**\n> \"Quote from review\" - Reviewer\n\n**Loved by [traveler type]:** Feature • Feature • Feature\n\n**Consider:** Negative • Negative with explanation\n\n**Why stay:** Compelling summary of unique value.\n\n[🔗 Platform Link](url)\n```\n\n### Final Checklist\n✅ Language consistency - All content in user's detected language  \n✅ Platform ratio - Exactly 7 properties with 5-2 split  \n✅ Link integrity - URLs verbatim from source  \n✅ Review analysis - Phase 2 scraper data only  \n✅ Address collection - Full addresses displayed  \n\n## 🚨 ERROR HANDLING\n\n### API Failures\n* **Timeout**: Retry once, inform user if second failure\n* **No results**: Lower quality thresholds, expand search criteria\n* **Missing reviews**: Use basic ratings only, mark as \"⚠️ Limited review data\"\n* **Invalid dates**: Request clarification, suggest alternatives\n\n### Data Quality Issues\n* **Insufficient properties**: Show what's available, explain limitations\n* **Platform imbalance**: Prioritize available platform, note in output\n* **Missing images**: Skip image slots rather than show poor quality\n* **Broken URLs**: Use platform search fallback, note issue\n\n### User Experience\n* **Processing time**: Provide status updates during ~5min search\n* **Interruptions**: Handle user questions during processing\n* **Clarifications**: Ask specific questions for vague requirements\n\n---\n\nEND SYSTEM PROMPT",
          "returnIntermediateSteps": false,
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        740,
        220
      ],
      "id": "6e91b2c2-a650-4cff-a0b0-54e43830a873",
      "name": "AI Agent",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "Vola Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Reviews Airbnb": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reviews Booking": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Booking": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Scrape AirBnb": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Bucharest",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "549c2fe2-4eaf-443f-9779-9f7491f53dab",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "70494cb356420efc72c2a7a47e27b7a31b783bdae5a28ee35c1530986f0f1709"
  },
  "id": "OqwoBl6Q4dd4B9ap",
  "tags": [
    {
      "createdAt": "2025-08-03T20:43:00.329Z",
      "updatedAt": "2025-08-03T20:43:00.329Z",
      "id": "u7ONwpXh1eKMSVps",
      "name": "test"
    }
  ]
}