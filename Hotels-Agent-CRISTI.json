{
  "name": "Hotels-Agent-CRISTI",
  "nodes": [
    {
      "parameters": {
        "toolDescription": "Scrape Google maps to get reviews",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/compass~crawler-google-places/run-sync-get-dataset-items?token=APIFY_API_KEY_REDACTED",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "7"
            },
            {
              "name": "limit",
              "value": "7"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.1) }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"locationQuery\": \"{{ $fromAI('locationQuery', `Define location using free text. Simpler formats work best; e.g., use City + Country`, 'string', 'Sibiu') }}\",\n    \"maxCrawledPlacesPerSearch\": {{ $fromAI('maxCrawledPlacesPerSearch', `Maximum number of places to crawl per search`, 'number', 10) }},\n    \"language\": \"{{ $fromAI('language', `The language to search in (en, ro, us)`, 'string', 'ro') }}\",\n    \"maxReviews\": {{ $fromAI('maxReviews', `How many reviews should we want to have?`, 'number', 10) }},\n    \"reviewsSort\": \"newest\",\n    \"reviewsOrigin\": \"google\",\n    \"scrapeReviewsPersonalData\": false,\n    \"searchStringsArray\": [\"hotels\"],\n    \"city\": \"{{ $fromAI('city', 'The specific city name for location-based search', 'string') }}\",\n    \"scrapeImageAuthors\": false,\n    \"maxImages\": 5\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "selected",
        "fields": "=hotelStars,hotelDescription,checkInDate,checkOutDate,similarHotelsNearby,hotelAds,placeId,totalScore,reviewsCount,reviewsDistribution,reviews,searchString,address,title,city,searchPageUrl"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1504,
        -64
      ],
      "id": "341fbd1d-abd4-4136-9078-0d184e9291f6",
      "name": "Scrape Google Maps",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        640,
        144
      ],
      "id": "9d6d3a9f-8c23-48ac-992d-a393bf3edf3e",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "6crYZOqBsqTBxATq",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "hotels_agent",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        784,
        144
      ],
      "id": "a1647779-8523-4aa5-8303-44c6c8f2d106",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "FPy2djSGyWu7XCgP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1cedc1f8-0343-4fd7-ae02-c94ebfcacc69",
              "name": "chatInput",
              "value": "={{ $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "fbff52a0-dbd2-47a5-b933-27ead60f90fa",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        656,
        -272
      ],
      "id": "763f9225-ebea-4e0f-a5e9-3c6c781c4c9c",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "042d2591-94ed-43a9-a5e5-0860412c08e5",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        464,
        -272
      ],
      "id": "ecf78b5f-258e-4f1b-9a69-7e109359caf3",
      "name": "Vola Webhook",
      "webhookId": "042d2591-94ed-43a9-a5e5-0860412c08e5"
    },
    {
      "parameters": {
        "content": "## Vola\nWebhook",
        "height": 240,
        "width": 1392,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        400,
        -352
      ],
      "typeVersion": 1,
      "id": "fbf22f66-a5b1-42c1-a0f8-38bc1480cbf1",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "toolDescription": "Get Accomodation Reviews for Airbnb Platform",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/tri_angle~airbnb-reviews-scraper/run-sync-get-dataset-items?token=APIFY_API_KEY_REDACTED",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "7"
            },
            {
              "name": "limit",
              "value": "7"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.1) }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "locale",
              "value": "ro-RO"
            },
            {
              "name": "startUrls",
              "value": "={{ $fromAI('startUrls', 'Array of cleaned hotel URLs from booking scraper results for further processing. This function should extract hotel URLs from the previously scraped Booking.com data and prepare them for additional scraping tools. Process each property object by: 1) Extract the \"url\" field from each hotel/property in the booking results, 2) Clean the URLs by removing all query parameters (strip everything after and including the \"?\" character to get base URLs), 3) Format as an array of objects where each object contains both \"url\" and \"method\" properties, 4) Set method to \"GET\" for all URLs. Expected output format: [{\"url\": \"https://example-hotel-url.com\", \"method\": \"GET\"}, {\"url\": \"https://another-hotel-url.com\", \"method\": \"GET\"}]. This tool should ONLY be called AFTER successfully receiving and processing results from the main Booking.com scraper tool, as it depends on that data to generate the URLs for subsequent processing steps.', 'json') }}"
            }
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "selected",
        "fields": "localizedText,startUrl,rating,text,id,localizedReview"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1024,
        304
      ],
      "id": "809c7eb1-75b8-4b7a-afe5-ef4e53301ecb",
      "name": "Reviews Airbnb",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Get Accomodation Reviews for Booking.com Platform",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/voyager~booking-reviews-scraper/run-sync-get-dataset-items?token=APIFY_API_KEY_REDACTED",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "7"
            },
            {
              "name": "limit",
              "value": "7"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.1) }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "cutoffDate",
              "value": "200 days"
            },
            {
              "name": "maxReviewsPerHotel",
              "value": "={{ Number(50) }}"
            },
            {
              "name": "sortReviewsBy",
              "value": "f_relevance"
            },
            {
              "name": "startUrls",
              "value": "={{ $fromAI('startUrls', 'Array of cleaned hotel URLs from booking scraper results. Extract the url field from each property, STRIP query parameters (remove ? and everything after), then format as [{\"url\": \"clean_hotel_url_1\"}, {\"url\": \"clean_hotel_url_2\"}]. This tool should only be called AFTER receiving results from the main Booking.com scraper.', 'json') }}"
            }
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "userName,userAvatar,propertyResponse,checkInDate,checkOutDate,id,numberOfNights,stayRoomId,hotelId,reviewsScoreFilter,reviewPage,startUrl"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1200,
        304
      ],
      "id": "fc914c18-7a44-4baf-92f3-38e18bf81b82",
      "name": "Reviews Booking",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Tools\nBusinessLogic",
        "height": 372,
        "width": 1212,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        576,
        288
      ],
      "typeVersion": 1,
      "id": "08282c98-5f44-45b2-83cb-70c4af474e61",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Agent\nBusinessLogic",
        "height": 400,
        "width": 1212,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        576,
        -112
      ],
      "typeVersion": 1,
      "id": "2b981046-ed92-44ac-8588-19046a905933",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Chat \n",
        "height": 788,
        "width": 180
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        400,
        -112
      ],
      "typeVersion": 1,
      "id": "6895c2e2-4d1e-434f-bf5f-47d2049e18e5",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1424,
        -272
      ],
      "id": "bd9ebc6a-6a6d-4ce1-931c-35a2ab3e7a09",
      "name": "Respond to Webhook",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Scrape Booking to get listings.",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/voyager~booking-scraper/run-sync-get-dataset-items?token=APIFY_API_KEY_REDACTED",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "7"
            },
            {
              "name": "limit",
              "value": "7"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.1) }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "minMaxPrice",
              "value": "={{ $fromAI('price_range', `The price range acceptable for the user formated as min-max, by default is 0-999999`, 'string') }}"
            },
            {
              "name": "checkIn",
              "value": "={{ $fromAI('check_in_date', `Check in date as ISO date only`, 'string') }}"
            },
            {
              "name": "checkOut",
              "value": "={{ $fromAI('check_out_date', `Check out date as ISO date only`, 'string') }}"
            },
            {
              "name": "search",
              "value": "={{ $fromAI('Destination', `The destination the user wants to visit`, 'string') }}"
            },
            {
              "name": "flexWindow",
              "value": "={{ $fromAI('flexibility_window', `How many days plus or minus the check-in or check-out date the client is ok with`, 'string') }}"
            },
            {
              "name": "adults",
              "value": "={{ $fromAI('adults', `Number of adults for the trip`, 'number') }}"
            },
            {
              "name": "children",
              "value": "={{ $fromAI('children', `Number of children for the trip`, 'number') }}"
            },
            {
              "name": "currency",
              "value": "={{ $fromAI('currency', `Currency in which to display results, usually RON, EUR or USD`, 'string') }}"
            },
            {
              "name": "rooms",
              "value": "={{ $fromAI('rooms', `Number of rooms needed by the client`, 'number') }}"
            },
            {
              "name": "language",
              "value": "ro"
            },
            {
              "name": "propertyType",
              "value": "={{ $fromAI('propertyType', 'One of the following: \"Hotels\", \"Apartments\", \"Hostels\", \"Guest Houses\", \"Homestays\", \"Bed an breakfasts\", \"Holiday homes\", \"Boats\", \"Villas\", \"Motels\", \"Resorts\", \"Holiday parks\", \"Campsites\", \"Luxury tents\" or \"none\"', 'string') }}"
            }
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "order,hotelChain,licenseInfo,hostInfo,traderInfo,breadcrumbs,timeOfScrapeISO,hotelId"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1376,
        304
      ],
      "id": "b5df3785-ad30-42bc-a095-403196a31609",
      "name": "Scrape Booking",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Scrape AirBnb to get available listings.",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/tri_angle~airbnb-scraper/run-sync-get-dataset-items?token=APIFY_API_KEY_REDACTED",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "7"
            },
            {
              "name": "limit",
              "value": "7"
            },
            {
              "name": "maxTotalChargeUsd",
              "value": "={{ Number(0.1) }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "adults",
              "value": "={{ $fromAI('adults', 'Number of adults on the trip', 'number') }}"
            },
            {
              "name": "checkIn",
              "value": "={{ $fromAI('check_in_date', 'Check-in date as ISO date only', 'string') }}"
            },
            {
              "name": "checkOut",
              "value": "={{ $fromAI('check_out_date', 'Check-out date as ISO date only', 'string') }}"
            },
            {
              "name": "children",
              "value": "={{ $fromAI('children', 'Number of children on the trip', 'number') }}"
            },
            {
              "name": "currency",
              "value": "={{ $fromAI('currency', `Currency in which to display results, usually RON, EUR or USD`, 'string') }}"
            },
            {
              "name": "infants",
              "value": "={{ $fromAI('infants', 'Number of infants on the trip', 'number') }}"
            },
            {
              "name": "locale",
              "value": "ro-RO"
            },
            {
              "name": "locationQueries",
              "value": "={{ [$fromAI('destination', `The destination the user wants to visit`, 'string')] }}"
            },
            {
              "name": "minBathrooms",
              "value": "={{ $fromAI('min_bathrooms', 'Minimum number of bathrooms at the stay', 'number') }}"
            },
            {
              "name": "minBedrooms",
              "value": "={{ $fromAI('min_bedrooms', 'Minimum number of bedrooms at the stay', 'number') }}"
            },
            {
              "name": "minBeds",
              "value": "={{ $fromAI('min_beds', 'Minimum number of beds at the stay', 'number') }}"
            },
            {
              "name": "pets",
              "value": "={{ $fromAI('pets', 'Number of pets on the trip', 'number') }}"
            },
            {
              "name": "priceMax",
              "value": "={{ $fromAI('price_max', 'Maximum price per night on the trip', 'number') }}"
            },
            {
              "name": "priceMin",
              "value": "={{ $fromAI('price_min', 'Minimum price per night on the trip', 'number') }}"
            }
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "id,descriptionOriginalLanguage,metaDescription,seoTitle,thumbnail,androidLink,iosLink,breadcrumbs,host,coHosts,locationSubtitle,htmlDescription,brandHighlights,icon,timestamp,language"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        848,
        304
      ],
      "id": "3ab1b9a0-07b8-4e5a-8d42-6ca325ab9c18",
      "name": "Scrape AirBnb",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Bună, sunt Volabot! 👋\nCu ce te pot ajuta azi?",
        "options": {
          "inputPlaceholder": "Vreau să merg într-o vacanță în Maldive, alături de soția mea, între 14 și 28 august...",
          "showWelcomeScreen": true,
          "subtitle": "Trimite-ne un mesaj, iar agentul nostru îți va găsi cele mai bune opțiuni de cazare care să corespundă preferințelor tale 🌴",
          "title": "Descoperă opțiuni de cazare cu Vola!",
          "customCss": ":root {\n  /* Vola Brand Colors */\n  --chat--color-primary: #4169E1;  /* Vola Blue */\n  --chat--color-primary-shade-50: #3B5FD9;\n  --chat--color-primary-shade-100: #3555D1;\n  --chat--color-secondary: #FFB800;  /* Vola Yellow/Orange */\n  --chat--color-secondary-shade-50: #E6A500;\n  --chat--color-white: #ffffff;\n  --chat--color-light: #f8f9fd;\n  --chat--color-light-shade-50: #eef1fb;\n  --chat--color-light-shade-100: #d9dff7;\n  --chat--color-medium: #c8d0e8;\n  --chat--color-dark: #1a2040;\n  --chat--color-disabled: #6b7280;\n  --chat--color-typing: #374151;\n\n  /* Base Layout */\n  --chat--spacing: 1rem;\n  --chat--border-radius: 0.5rem;  /* Slightly more rounded for modern look */\n  --chat--transition-duration: 0.15s;\n\n  /* Window Dimensions */\n  --chat--window--width: 400px;\n  --chat--window--height: 600px;\n  --chat--window--bottom: var(--chat--spacing);\n  --chat--window--right: var(--chat--spacing);\n  --chat--window--z-index: 9999;\n  --chat--window--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--window--border-radius: 1rem;  /* More rounded window */\n  --chat--window--margin-bottom: var(--chat--spacing);\n\n  /* Header Styles - Vola Blue */\n  --chat--header-height: auto;\n  --chat--header--padding: var(--chat--spacing);\n  --chat--header--background: var(--chat--color-primary);\n  --chat--header--color: var(--chat--color-white);\n  --chat--header--border-top: none;\n  --chat--header--border-bottom: none;\n  --chat--header--border-left: none;\n  --chat--header--border-right: none;\n  --chat--heading--font-size: 2em;\n  --chat--subtitle--font-size: inherit;\n  --chat--subtitle--line-height: 1.8;\n\n  /* Message Styles */\n  --chat--message--font-size: 1rem;\n  --chat--message--padding: var(--chat--spacing);\n  --chat--message--border-radius: 1rem;  /* More rounded messages */\n  --chat--message-line-height: 1.5;\n  --chat--message--margin-bottom: calc(var(--chat--spacing) * 1);\n  --chat--message--bot--background: var(--chat--color-white);\n  --chat--message--bot--color: var(--chat--color-dark);\n  --chat--message--bot--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--user--border: none;\n  --chat--message--pre--background: rgba(65, 105, 225, 0.1);  /* Light blue background for code */\n  --chat--messages-list--padding: var(--chat--spacing);\n\n  /* Toggle Button - Vola Blue with Yellow accent */\n  --chat--toggle--size: 64px;\n  --chat--toggle--width: var(--chat--toggle--size);\n  --chat--toggle--height: var(--chat--toggle--size);\n  --chat--toggle--border-radius: 50%;\n  --chat--toggle--background: var(--chat--color-primary);\n  --chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n  --chat--toggle--active--background: var(--chat--color-primary-shade-100);\n  --chat--toggle--color: var(--chat--color-white);\n\n  /* Button Styles */\n  --chat--button--color: var(--chat--color-white);\n  --chat--button--background: var(--chat--color-primary);\n  --chat--button--padding: calc(var(--chat--spacing) * 1 / 2) var(--chat--spacing);\n  --chat--button--border-radius: 0.5rem;\n  --chat--button--hover--color: var(--chat--color-white);\n  --chat--button--hover--background: var(--chat--color-primary-shade-50);\n  --chat--close--button--color-hover: var(--chat--color-primary);\n\n  /* Send and File Buttons - Yellow accent */\n  --chat--input--send--button--background: var(--chat--color-secondary);\n  --chat--input--send--button--color: var(--chat--color-dark);\n  --chat--input--send--button--background-hover: var(--chat--color-secondary-shade-50);\n  --chat--input--send--button--color-hover: var(--chat--color-dark);\n  --chat--input--file--button--background: var(--chat--color-white);\n  --chat--input--file--button--color: var(--chat--color-primary);\n  --chat--input--file--button--background-hover: var(--chat--color-light);\n  --chat--input--file--button--color-hover: var(--chat--color-primary-shade-50);\n  --chat--files-spacing: 0.25rem;\n\n  /* Body and Footer - Light blue tint */\n  --chat--body--background: var(--chat--color-light);\n  --chat--footer--background: var(--chat--color-light);\n  --chat--footer--color: var(--chat--color-dark);\n}\n\n/* Custom message styling for Vola theme */\n.chat-message {\n  max-width: 50%;\n  box-shadow: 0 2px 8px rgba(65, 105, 225, 0.1);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.chat-message:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(65, 105, 225, 0.15);\n}\n\n/* Additional Vola-specific enhancements */\n.chat-header {\n  background: linear-gradient(135deg, var(--chat--color-primary) 0%, var(--chat--color-primary-shade-50) 100%);\n}\n\n.chat-toggle {\n  box-shadow: 0 4px 16px rgba(65, 105, 225, 0.3);\n  transition: all 0.3s ease;\n}\n\n.chat-toggle:hover {\n  box-shadow: 0 6px 20px rgba(65, 105, 225, 0.4);\n  transform: translateY(-2px);\n}",
          "responseMode": "responseNode"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        432,
        -48
      ],
      "id": "97a2f9fe-d27c-4b0a-96af-fa4792427c42",
      "name": "When chat message received",
      "webhookId": "b419f5d3-82dd-41d3-933d-eca656870ab6"
    },
    {
      "parameters": {
        "toolDescription": "Try to get the images per property, using the url from the images array",
        "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', `this is used to gather the exact URL per property, to get it, to gain the binary`, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1664,
        496
      ],
      "id": "5f758f8a-a176-4a02-9bae-37e3680faf06",
      "name": "Tool Call for url images"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "",
          "returnIntermediateSteps": false,
          "passthroughBinaryImages": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        960,
        -64
      ],
      "id": "b122f9e8-d807-469c-bfbc-b1b5738dcec1",
      "name": "Main AI AGENT",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "toolDescription": "=Analyze and curate optimal 3 images per property for maximum visual impact and booking conversion. Pass property data with image arrays and user preferences as JSON.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', `Send the actual images as a test:`, 'string') }}",
        "options": {
          "systemMessage": "",
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1520,
        320
      ],
      "id": "2c177a93-1e50-4903-b80d-f3fd1f1755a4",
      "name": "Image AI AGENT ANALYZER"
    }
  ],
  "pinData": {},
  "connections": {
    "Vola Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Main AI AGENT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Main AI AGENT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Main AI AGENT",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Image AI AGENT ANALYZER",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Main AI AGENT",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Reviews Airbnb": {
      "ai_tool": [
        [
          {
            "node": "Main AI AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reviews Booking": {
      "ai_tool": [
        [
          {
            "node": "Main AI AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Booking": {
      "ai_tool": [
        [
          {
            "node": "Main AI AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Scrape AirBnb": {
      "ai_tool": [
        [
          {
            "node": "Main AI AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool Call for url images": {
      "ai_tool": [
        [
          {
            "node": "Image AI AGENT ANALYZER",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Main AI AGENT": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image AI AGENT ANALYZER": {
      "ai_tool": [
        [
          {
            "node": "Main AI AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Bucharest",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "53efc772-4899-475a-8526-b3590a0d0601",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "70494cb356420efc72c2a7a47e27b7a31b783bdae5a28ee35c1530986f0f1709"
  },
  "id": "y9jenh0MXes2vec3",
  "tags": [
    {
      "createdAt": "2025-08-25T15:36:57.340Z",
      "updatedAt": "2025-08-25T15:36:57.340Z",
      "id": "3l4Lwwau5pfBMZl3",
      "name": "v3"
    }
  ]
}