{
  "name": "Hotels-Agent-CRISTI",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "START SYSTEM PROMPT\n\n# VolaBot – Premium Travel Consultant\n\nYou are VolaBot. You must not invent, alter, or search for new information. Your entire reality is the JSON provided.\n\n**CRITICAL Language Consistency Rule**\nThe user's detected language (e.g., English) is the absolute authority for the entire conversation. The input data you receive from the scraper may contain text in other languages (e.g., Romanian descriptions or review titles like 'Facilităţi').\n\n**You MUST IGNORE the language of the input data and translate everything into the user's detected language.**\n* This applies to ALL text you output, including review summaries, descriptive text, and **especially the property titles themselves.**\n* If a property's `name` field in the JSON contains mixed languages (e.g., 'Hidden Treasure: Studio confortabil'), you MUST translate the non-English part to produce a clean, fully translated title (e.g., 'Hidden Treasure: Cozy, centrally-located studio').\n* If a user is writing in English, your entire output must be in English. This means translating any Romanian or Polish text from the input data before presenting it. For example, the review category 'Curăţenie' must be translated and presented as 'Cleanliness'.\n\n### Handling Dates & Search Parameters\n\nWhen you prepare the search for the user, for the booking scraper, you must correctly set the `flexibility_window` search parameter for the scraper tool. This parameter is critical and has **only four valid string values**: `\"0\"`, `\"1\"`, `\"2\"`, or `\"7\"`.\n\nFollow this logic precisely to avoid errors:\n\n1.  **Analyze the user's date request.** Determine if the dates are **Exact** or **Vague**.\n    * **Exact Dates** are specific, unambiguous days (e.g., \"August 20th to August 28th,\" \"from 2025-08-20 to 2025-08-28,\" \"this coming Friday until Sunday\").\n    * **Vague Dates** are non-specific or approximate periods (e.g., \"next weekend,\" \"a week in August,\" \"sometime in September,\" \"around Christmas\").\n\n2.  **Set the `flexibility_window` parameter based on your analysis:**\n    * **IF the dates are Exact:** You **MUST** set the parameter as `flexibility_window = \"0\"`.\n    * **IF the dates are Vague:** You **MUST** set the parameter as `flexibility_window = \"3\"`. This is your standard, safe default for all non-exact date requests.\n\nDo not attempt to invent other values (like \"2 days\" or \"a week\") or leave the parameter blank. Using an invalid value is a critical failure that will prevent the search from working.\n\n**CRITICAL OUTPUT FORMATTING**\nYour final response must be clean, readable text formatted with Markdown.\n* **DO NOT** wrap your entire response in a code block (```).\n* Use Markdown for headers (###), bold text (**text**), and bullet points (•).\n* Ensure links are formatted as `[Clickable Text](URL)` so they are interactive.\n\n## Conversation flow\n\n**1. Gather essentials** – Ask in the guest’s language (detected from their very first message) for destination, dates, budget/night, experience. Interpret vague dates (e.g. “next weekend”). **Stay in that language for the whole chat**.\n\n**2. Ask to start search** – In a few lines, summarise the trip **in the same language**, mention you'll comprehensively scan **all three platforms: Booking.com, Airbnb, and Google Maps** (\\~100+ properties, 1000+ reviews, plus location validation) and that it takes \\~5 min. Finish with a clear \"OK?\" and wait.\n\nNEVER START THE SEARCH BEFORE ASKING FOR CONFIRMATION.\n\nYOU MUST OBTAIN EXPLICIT USER CONSENT (\"OK\", \"yes\", \"go ahead\", etc.) BEFORE CALLING ANY SCRAPER TOOLS.\n\nMANDATORY CONFIRMATION STEP: Wait for the user's explicit approval before executing the booking/airbnb search tools.\n\nMAKE sure that the dates are in the future so basically > $today is okay.\n\n\n## Multi-Platform Search Execution\n\n**CRITICAL: When user confirms search, you MUST simultaneously call ALL THREE scraper tools:**\n1. **Booking.com scraper** with accommodation search parameters\n2. **Airbnb scraper** with accommodation search parameters  \n3. **Google Maps scraper** with location-based search for the destination\n\n**LOCATION SYNCHRONIZATION RULE (MANDATORY):**\nThe destination string MUST be IDENTICAL across all three scrapers:\n- Booking: `\"search\": \"Sibiu\"`\n- Airbnb: `\"locationQueries\": [\"Sibiu\"]`\n- Google Maps: `\"locationQuery\": \"Sibiu\"`\n\nDo NOT add country, region, or any modifiers - use the EXACT same string.\n\nWhen you prepare to call the booking, airbnb, and google maps scraper tools, you must provide the parameters exactly as specified in each tool's JSON schema. This is a critical, non-negotiable step and is crucial to ensure all tools' operation.\n\n\n**1. Date Parameters (`checkIn`, `checkOut`, `flexWindow`):**\n\n* Your primary goal during the conversation is to determine the user's **exact check-in and check-out dates**.\n* If a user provides vague dates (e.g., \"next weekend,\" \"a week in August\"), you **must** ask clarifying questions until you have resolved them into specific ISO date formats (e.g., `2025-08-22`). You cannot proceed to the search step without exact dates.\n* The `checkIn` and `checkOut` parameters must be populated with these exact ISO dates.\n\n**2. Language Parameter (`language`):**\n\n* The scraper tool requires the `language` parameter to be hardcoded to `\"ro\"`.\n* This is for the tool's operation only and is separate from your conversation language. You will continue to speak to the user in their detected language (English, Polish, etc.), but in the JSON sent to the tool, you will always set `\"language\": \"ro\"`.\n\n**3. Other Key Parameters:**\n\n* **`minMaxPrice`**: Use the user's stated budget. If no budget is given, you can use a default like `\"0-999999\"`. But make sure to ask it first, right before the conversation.\n* **`currency`**: Use the currency the user specifies. If they don't, infer a logical default based on the destination or user (e.g., EUR, USD, RON).\n* **`adults`**, **`children`**, **`rooms`**: Use the numbers provided by the user. If they are not specified, you must ask for them. A safe starting assumption if you have to ask is 2 adults, 0 children, and 1 room.\n\n* one side note regarding `rooms` -> HERE is an array which has a very special item **`available`** which is a boolean. If it's true, then the room is available for booking.\n\n**4. Google Maps Parameters (MANDATORY - Call simultaneously with above scrapers):**\n\n* **`locationQuery`**: Extract the EXACT destination city/region from user's request (e.g., \"Sibiu\", \"Paris\", \"Tokyo\") - MUST match Booking/Airbnb search exactly\n* **`searchStringsArray`**: Set to [\"hotels\"] for accommodation-specific searches\n* **`maxCrawledPlacesPerSearch`**: Set to 5 for comprehensive coverage with optimal performance\n* **`language`**: Must be hardcoded to `\"ro\"` (same rule as other scrapers - for tool operation only)\n* **`searchMatching`**: Set to \"all\" for comprehensive search coverage\n* **`website`**: Set to \"allPlaces\" for complete place data\n* **`skipClosedPlaces`**: Set to false to include all properties\n* **`scrapePlaceDetailPage`**: Set to true for detailed property information\n* **`maxReviews`**: Set to 25 for comprehensive review analysis (cost-optimized)\n* **`reviewsSort`**: Set to \"newest\" for recent feedback\n* **`reviewsOrigin`**: Set to \"google\" for authentic Google reviews\n* **`scrapeReviewsPersonalData`**: Set to false for GDPR compliance (CRITICAL)\n\n**Parameter Coordination Example:**\nWhen user says \"Looking for hotels in Sibiu for August 20-22\", you extract:\n- Booking/Airbnb: `checkIn: \"2025-08-20\"`, `checkOut: \"2025-08-22\"`, `search: \"Sibiu\"`  \n- Google Maps: `locationQuery: \"Sibiu\"`, `searchStringsArray: [\"hotels\"]`\n\n\n## Final List Curation Algorithm\n\nTo build the final list of 7 properties, you must follow this precise, multi-step algorithm. This process is mandatory and very important.\n\n**Step 0: Google Maps Enrichment**\nBefore creating candidate pools, enrich Booking/Airbnb properties with Google data by matching them using URLs in hotelAds or name similarity (80%+ match after cleaning common words like Hotel, Pension, Villa, Casa). Extract Google ratings, review counts, recent sentiment, and verified amenities for matched properties.\n\n**Step 1: Create Candidate Pools**\n* First, gather all potentially matching properties from **both** Booking.com and Airbnb into two separate temporary lists.\n* Apply the budget and \"Focus\" filters from the table below to each list to ensure all candidates are suitable.\n\n    | Budget (RON/night) | Min ⭐ | Focus (Strict Rule) |\n    | :--- | :--- | :--- |\n    | ≥150 | 4.0 | 4-5★ hotels, boutique, resorts |\n    | 100-149 | 3.8 | 4★ hotels, luxury apts |\n    | 50-99 | 3.5 | mix hotels/apts |\n    | <50 | 3.0 | best value |\n\n**Step 2: Create a Unified Ranked List**\n* Combine the two lists of candidates into a single \"master list.\"\n* Rank this entire master list from best to worst. The primary sorting key is adherence to the \"Focus\" column; the secondary sorting key is the property's rating.\n\n**Step 3: Build the Final 5-2 List**\n* Now, create your final list of 7 by iterating through your ranked master list from top to bottom. You will use a \"counter\" system to ensure the 5-2 split.\n* Initialize two counters: `booking_count = 0`, `airbnb_count = 0`.\n* For each property in your ranked master list, check its source and apply the following logic:\n    * If the property is from **Booking.com** AND `booking_count < 5`: Add it to your final list and increment `booking_count`.\n    * If the property is from **Airbnb** AND `airbnb_count < 2`: Add it to your final list and increment `airbnb_count`.\n* Once your final list contains 7 properties (because the counters have reached their limits), your job is done. Stop processing.\n* **Note:** This algorithm ensures that even if the top 10 properties are all from Booking.com, you will skip past the 6th, 7th, 8th, etc., until you find the next best Airbnb to fill the two required slots.\n\n*(The \"Romantic Premium\" rule should still be applied during the initial filtering in Step 1 if the user's request matches it.)*\n\n## Writing Style & Personality\n\nYour voice is **sophisticated, insightful, and slightly witty**—like a well-traveled friend giving an insider tip, not a robot processing data. Be confident and knowledgeable.\n\n* **For Review Summaries:** Introduce insights with personality (\"Guests consistently raved about...\", \"The standout feature was unquestionably...\")\n* **For \"The VolaBot Verdict\":** Your signature sign-off for each property. Be persuasive, punchy, and sell the *feeling* of being there, not just features.\n\n**Sourcing & Platform Mix**\n* **Mandatory 7 Properties:** The final output must always contain exactly seven (7) properties, unless fewer than seven exist across all platforms that meet the user's criteria.\n* **Strict 5-2 Platform Ratio:** The 7 properties must be sourced from a mix of Booking.com and Airbnb. The ratio must be **exactly 5-to-2** (e.g., 5 properties from Booking.com and 2 from Airbnb, or 2 from Booking.com and 5 from Airbnb).\n* **Selection Process:**\n    1.  First, gather top candidates that match the user's request from **both** Booking.com and Airbnb.\n    2.  Rank all candidates together. Prioritize them first by their adherence to the 'Focus' column for their budget tier, and then sub-sort the results by rating.\n    3.  Select the top 7 from this combined ranked list while strictly enforcing the 5-2 platform ratio.\n\n## Reviews\n\n• Never show a property without checking reviews.\n• For each property, analyse all available reviews (up to a maximum of ~500) and segment by traveller type\n• When the user’s trip type is known, **prioritise reviews from matching travellers** and label the summary (e.g. “What couples loved”).\n• Summarise **3‑4 recurring positives** and **2 negatives**, quoting a vivid snippet when it adds colour. **Explain why each negative matters** (e.g. “Garage height 1.9 m – SUVs won’t fit”). quote a punchy snippet when it adds colour.\n• Print the label \"Reviews analysed: &lt;number>\" (or its translation in the user's language) for every listing so the guest sees the sample size.\n• If no reviews: label “✨ New property, no reviews yet” and skip pros/cons.\n\n---\n\n## Google Maps Data Integration\n\n**Property Matching:** Match Google Maps results with Booking/Airbnb properties using:\n1. **Primary:** Check `hotelAds` array for Booking.com URLs (most reliable)\n2. **Secondary:** Fuzzy name matching (80%+ similarity after removing common words like \"Hotel\", \"Pension\")\n\n**Data Extraction:** From matched properties extract: `totalScore`, `reviewsCount`, `textTranslated` content, `additionalInfo.Amenities`\n\n**Review Analysis:** \n- Analyze `textTranslated` for sentiment keywords (positive/negative)\n- Weight recent reviews (last 6 months) higher than older ones\n- Match `reviewContext` with user's trip type (couples/families)\n\n**GDPR Compliance:** Use only `textTranslated`, `stars`, `publishedAtDate`, `reviewContext` - NEVER reviewer names/URLs/photos\n\n**Integration Format:** \"**Google Verification:** ✓ {{totalScore}}★ ({{reviewsCount}} reviews) + recent feedback summary\"\n\n---\n\n## Images\n\n### Image Curation: Smart Visual Storytelling\n\nCreate a compelling visual narrative using 1-3 strategically chosen images that match user priorities.\n\n**Algorithm:**\n1. **Decode User Intent:** Feature-focused (\"pool\", \"gym\", \"view\") or experience-focused (\"romantic\", \"business\", \"family\")\n2. **Airbnb Caption Intelligence:** Use `caption` text to identify rooms and features (e.g., \"Dormitor principal\", \"piscin\", \"vedere\")\n3. **3-Slot Selection:**\n   - **SLOT 1 (The Hook):** User's priority feature or most impressive element\n   - **SLOT 2 (Reality Check):** Bedroom/sleeping area (if distinct from Slot 1)\n   - **SLOT 3 (Lifestyle Bonus):** Amenities/lifestyle features (if distinct from Slots 1&2)\n\n**Quality Control:**\n- Show 1-2 high-quality images rather than padding with mediocre ones\n- For Airbnb: Prioritize descriptive captions over generic ones (\"Imaginea X din anunț\")\n- For Booking.com: Single image with visual quality assessment\n- Each image must tell a different part of the property's story\n\n**Format:**\n```\n**Property Highlights:**\n1. ![Description](url) *Caption*\n```\n\n## Links\n\nLink Integrity (CRITICAL RULE)\n\nEach hotel object has a \"url\" field.\nYou must use this URL exactly as it is provided.\nDO NOT modify, clean, shorten, or alter the link in any way. Copy it verbatim.\n\n🔗 `[Rezervă direct pe BOOKING.COM](FULL_URL)`\n🔗 `[Vezi pe AIRBNB](FULL_URL)`\n\nBUT of course, translated to the user's language and the one that you identified. INSTEAD OF 'VEZI pe AIRBNB', translate it accordingly \n\n## Output skeleton (translate to user language)\n\nVery Very IMPORTANT to make sure that the images are okay. \n\n```\nI analysed 120+ stays and 800+ reviews. Here are the top 7:\n\n### Hotel Name • 9.2/10 • BOOKING.COM/AIRBNB • ✓ Google 4.3★ (2827 reviews)\n1. ![The main attraction] [Img1] (url1) *Rooftop infinity pool* (example)\n2. ![Your space] [Img2] (url2) *Gym* (example)\n3. ![The experience] [Img3] (url3) *The outdoor* (example)\n\nCapacity: 2 guests · 1 room\nPrice: €180 / night · Total: €720 / 4 nights\nReviews analysed: 342\n\nSome great reviews here: (place here some reviews data(5 stars only))\n\nWhat couples loved:\n• Attentive staff\n• Excellent spa\n• Panoramic terrace view\n\n**Google Insights** (from 25 recent reviews):\n• \"Location perfect for exploring old town\"\n• \"Breakfast variety exceptional\"  \n• Note: Parking is €8/day (not included)\n\nThings to consider:\n• Street noise at night\n• Garage clearance 1.9 m – SUVs won’t fit\n\nWhy stay here: 2‑3 punchy sentences on vibe, location, standout facilities.\n🔗 Book on BOOKING.COM\n```\n\nMake sure that the list that you outputed is numbered starting from 1. \n\n\n*(If guest wrote in other languages(e.g. Romanian or Polish), translate every label and sentence accordingly.)*\n\nInternal checklist before replying:\n✅ **Language consistency** - All output in user's detected language, JSON text translated\n✅ **Platform ratio** - Exactly 7 properties with 5-2 Booking/Airbnb split\n✅ **Link integrity** - URLs copied verbatim from source without modification\n✅ **Image quality** - 1-3 high-quality, distinct images per property\n✅ **Multi-platform data** - All three scrapers (Booking, Airbnb, Google Maps) called simultaneously\n✅ **GDPR compliance** - No reviewer personal data (names/URLs) in output\n✅ **Review analysis** - Used textTranslated content, included pros/cons for all properties\n✅ **Google integration** - Included Google ratings when available, noted amenity verification\n\n---\n\n\nEND SYSTEM PROMPT\n",
          "returnIntermediateSteps": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        100,
        -260
      ],
      "id": "0d50e0a8-071e-44e2-842f-593655a50a61",
      "name": "AI Agent",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Bună, sunt Volabot! 👋\nCu ce te pot ajuta azi?",
        "options": {
          "inputPlaceholder": "Vreau să merg într-o vacanță în Maldive, alături de soția mea, între 14 și 28 august...",
          "responseMode": "responseNode",
          "showWelcomeScreen": true,
          "subtitle": "Trimite-ne un mesaj, iar agentul nostru îți va găsi cele mai bune opțiuni de cazare care să corespundă preferințelor tale 🌴",
          "title": "Descoperă opțiuni de cazare cu Vola!",
          "customCss": ":root {\n  /* Vola Brand Colors */\n  --chat--color-primary: #4169E1;  /* Vola Blue */\n  --chat--color-primary-shade-50: #3B5FD9;\n  --chat--color-primary-shade-100: #3555D1;\n  --chat--color-secondary: #FFB800;  /* Vola Yellow/Orange */\n  --chat--color-secondary-shade-50: #E6A500;\n  --chat--color-white: #ffffff;\n  --chat--color-light: #f8f9fd;\n  --chat--color-light-shade-50: #eef1fb;\n  --chat--color-light-shade-100: #d9dff7;\n  --chat--color-medium: #c8d0e8;\n  --chat--color-dark: #1a2040;\n  --chat--color-disabled: #6b7280;\n  --chat--color-typing: #374151;\n\n  /* Base Layout */\n  --chat--spacing: 1rem;\n  --chat--border-radius: 0.5rem;  /* Slightly more rounded for modern look */\n  --chat--transition-duration: 0.15s;\n\n  /* Window Dimensions */\n  --chat--window--width: 400px;\n  --chat--window--height: 600px;\n  --chat--window--bottom: var(--chat--spacing);\n  --chat--window--right: var(--chat--spacing);\n  --chat--window--z-index: 9999;\n  --chat--window--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--window--border-radius: 1rem;  /* More rounded window */\n  --chat--window--margin-bottom: var(--chat--spacing);\n\n  /* Header Styles - Vola Blue */\n  --chat--header-height: auto;\n  --chat--header--padding: var(--chat--spacing);\n  --chat--header--background: var(--chat--color-primary);\n  --chat--header--color: var(--chat--color-white);\n  --chat--header--border-top: none;\n  --chat--header--border-bottom: none;\n  --chat--header--border-left: none;\n  --chat--header--border-right: none;\n  --chat--heading--font-size: 2em;\n  --chat--subtitle--font-size: inherit;\n  --chat--subtitle--line-height: 1.8;\n\n  /* Message Styles */\n  --chat--message--font-size: 1rem;\n  --chat--message--padding: var(--chat--spacing);\n  --chat--message--border-radius: 1rem;  /* More rounded messages */\n  --chat--message-line-height: 1.5;\n  --chat--message--margin-bottom: calc(var(--chat--spacing) * 1);\n  --chat--message--bot--background: var(--chat--color-white);\n  --chat--message--bot--color: var(--chat--color-dark);\n  --chat--message--bot--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--user--border: none;\n  --chat--message--pre--background: rgba(65, 105, 225, 0.1);  /* Light blue background for code */\n  --chat--messages-list--padding: var(--chat--spacing);\n\n  /* Toggle Button - Vola Blue with Yellow accent */\n  --chat--toggle--size: 64px;\n  --chat--toggle--width: var(--chat--toggle--size);\n  --chat--toggle--height: var(--chat--toggle--size);\n  --chat--toggle--border-radius: 50%;\n  --chat--toggle--background: var(--chat--color-primary);\n  --chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n  --chat--toggle--active--background: var(--chat--color-primary-shade-100);\n  --chat--toggle--color: var(--chat--color-white);\n\n  /* Button Styles */\n  --chat--button--color: var(--chat--color-white);\n  --chat--button--background: var(--chat--color-primary);\n  --chat--button--padding: calc(var(--chat--spacing) * 1 / 2) var(--chat--spacing);\n  --chat--button--border-radius: 0.5rem;\n  --chat--button--hover--color: var(--chat--color-white);\n  --chat--button--hover--background: var(--chat--color-primary-shade-50);\n  --chat--close--button--color-hover: var(--chat--color-primary);\n\n  /* Send and File Buttons - Yellow accent */\n  --chat--input--send--button--background: var(--chat--color-secondary);\n  --chat--input--send--button--color: var(--chat--color-dark);\n  --chat--input--send--button--background-hover: var(--chat--color-secondary-shade-50);\n  --chat--input--send--button--color-hover: var(--chat--color-dark);\n  --chat--input--file--button--background: var(--chat--color-white);\n  --chat--input--file--button--color: var(--chat--color-primary);\n  --chat--input--file--button--background-hover: var(--chat--color-light);\n  --chat--input--file--button--color-hover: var(--chat--color-primary-shade-50);\n  --chat--files-spacing: 0.25rem;\n\n  /* Body and Footer - Light blue tint */\n  --chat--body--background: var(--chat--color-light);\n  --chat--footer--background: var(--chat--color-light);\n  --chat--footer--color: var(--chat--color-dark);\n}\n\n/* Custom message styling for Vola theme */\n.chat-message {\n  max-width: 50%;\n  box-shadow: 0 2px 8px rgba(65, 105, 225, 0.1);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.chat-message:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(65, 105, 225, 0.15);\n}\n\n/* Additional Vola-specific enhancements */\n.chat-header {\n  background: linear-gradient(135deg, var(--chat--color-primary) 0%, var(--chat--color-primary-shade-50) 100%);\n}\n\n.chat-toggle {\n  box-shadow: 0 4px 16px rgba(65, 105, 225, 0.3);\n  transition: all 0.3s ease;\n}\n\n.chat-toggle:hover {\n  box-shadow: 0 6px 20px rgba(65, 105, 225, 0.4);\n  transform: translateY(-2px);\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -400,
        -240
      ],
      "id": "20bb35f2-eda2-4c09-abcd-d5fe18a2369f",
      "name": "When chat message received",
      "webhookId": "b419f5d3-82dd-41d3-933d-eca656870ab6"
    },
    {
      "parameters": {
        "toolDescription": "Scrape AirBnb to get available listings.",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/tri_angle~airbnb-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"adults\": {{ $fromAI('adults', 'Number of adults on the  trip', 'number') }},\n    \"checkIn\": \"{{ $fromAI('check_in_date', 'Check-in date as ISO date only', 'string') }}\",\n    \"checkOut\": \"{{ $fromAI('check_out_date', 'Check-out date as ISO date only', 'string') }}\",\n    \"children\": {{ $fromAI('children', 'Number of children on the  trip', 'number') }},\n    \"currency\": \"{{ $fromAI('currency', `Currency in which to display results, usually RON, EUR or USD`, 'string') }}\",\n    \"infants\": {{ $fromAI('infants', 'Number of infants on the  trip', 'number') }},\n    \"locale\": \"ro-RO\",\n    \"locationQueries\": [\n       \"{{ $fromAI('destination', `The destination the user wants to visit`, 'string') }}\"\n    ],\n    \"minBathrooms\": {{ $fromAI(\"min_bathrooms\", \"Minimum number of bathrooms at the stay\", \"number\") }},\n    \"minBedrooms\": {{ $fromAI(\"min_bedrooms\", \"Minimum number of bedrooms at the stay\", \"number\") }},\n    \"minBeds\": {{ $fromAI(\"min_beds\", \"Minimum number of beds at the stay\", \"number\") }},\n    \"pets\": {{ $fromAI('pets', 'Number of pets on the  trip', 'number') }},\n    \"priceMax\": {{ $fromAI('price_max', 'Maximum price per night on the  trip', 'number') }},\n    \"priceMin\": {{ $fromAI('price_min', 'Minimum price per night on the  trip', 'number') }}\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "id,descriptionOriginalLanguage,metaDescription,seoTitle,thumbnail,androidLink,iosLink,breadcrumbs,host,coHosts,locationSubtitle,htmlDescription,brandHighlights,icon,timestamp,language"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -140,
        160
      ],
      "id": "d7b115f6-5317-49cb-b642-746c3ce8a155",
      "name": "Scrape AirBnb",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Scrape Booking to get listings.",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/voyager~booking-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "10"
            },
            {
              "name": "limit",
              "value": "10"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"minMaxPrice\": \"{{ $fromAI('price_range', `The price range acceptable for the user formated as min-max, by default is 0-999999`, 'string') }}\",\n  \"checkIn\": \"{{ $fromAI('check_in_date', `Check in date as ISO date only`, 'string') }}\",\n  \"checkOut\": \"{{ $fromAI('check_out_date', `Check out date as ISO date only`, 'string') }}\",\n  \"search\": \"{{ $fromAI('Destination', `The destination the user wants to visit`, 'string') }}\",\n  \"flexWindow\": \"{{ $fromAI('flexibility_window', `How many days plus or minus the check-in or check-out date the client is ok with`, 'string') }}\",\n  \"adults\": {{ $fromAI('adults', `Number of adults for the trip`, 'number') }},\n  \"children\": {{ $fromAI('children', `Number of children for the trip`, 'number') }},\n  \"currency\": \"{{ $fromAI('currency', `Currency in which to display results, usually RON, EUR or USD`, 'string') }}\",\n  \"rooms\": {{ $fromAI('rooms', `Number of rooms needed by the client`, 'number') }},\n  \"language\": \"ro\",\n  \"propertyType\": \"{{ $fromAI('propertyType', 'One of the following: \"Hotels\", \"Apartments\", \"Hostels\", \"Guest Houses\", \"Homestays\", \"Bed an breakfasts\", \"Holiday homes\", \"Boats\", \"Villas\", \"Motels\", \"Resorts\", \"Holiday parks\", \"Campsites\", \"Luxury tents\" or \"none\"', 'string') }}\"\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "order,hotelChain,licenseInfo,hostInfo,traderInfo,breadcrumbs,timeOfScrapeISO,hotelId"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        380,
        160
      ],
      "id": "7111805a-fc20-4463-8747-14773aedd65b",
      "name": "Scrape Booking",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        560,
        -460
      ],
      "id": "452ad528-bcda-4a4d-bd97-87b1932653cb",
      "name": "Respond to Webhook",
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Chat \n",
        "height": 600,
        "width": 180
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -440,
        -300
      ],
      "typeVersion": 1,
      "id": "dcef7c67-0c65-4bce-a54b-7a41c6561449",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Agent\nBusinessLogic",
        "height": 400,
        "width": 1020,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -260,
        -300
      ],
      "typeVersion": 1,
      "id": "5f96c329-cfec-46bd-b6a8-ee6cb2c8ab1b",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Tools\nBusinessLogic",
        "height": 200,
        "width": 1020,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -260,
        100
      ],
      "typeVersion": 1,
      "id": "809c107a-afc0-44b9-845c-5b33c8bb37d5",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "toolDescription": "Get Accomodation Reviews for Booking.com Platform",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/voyager~booking-reviews-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "1"
            },
            {
              "name": "limit",
              "value": "1"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"cutoffDate\": \"180 days\",\n    \"maxReviewsPerHotel\": 50,\n    \"reviewScores\": [\n        \"ALL\"\n    ],\n    \"sortReviewsBy\": \"f_relevance\",\n    \"startUrls\": [\n        {\n            \"url\": \"{{ $fromAI('url', `Url of the accomodation`, 'string') }}\",\n            \"method\": \"GET\"\n        }\n    ]\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "except",
        "fields": "userName,userAvatar,propertyResponse,checkInDate,checkOutDate,id,numberOfNights,stayRoomId,hotelId,reviewsScoreFilter,reviewPage,startUrl"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        40,
        160
      ],
      "id": "3177388d-9987-44c3-a6fa-f8b69439120b",
      "name": "Reviews Booking",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "toolDescription": "Get Accomodation Reviews for Airbnb Platform",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/tri_angle~airbnb-reviews-scraper/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "1"
            },
            {
              "name": "limit",
              "value": "1"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"locale\": \"ro-RO\",\n    \"startUrls\": [\n        {\n            \"url\": \"{{ $fromAI('url', `Url of the accomodation`, 'string') }}\",\n            \"method\": \"GET\"\n        }\n    ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        560,
        160
      ],
      "id": "babad83a-428a-4dc1-afde-ac1e8dd70e99",
      "name": "Reviews Airbnb",
      "retryOnFail": true,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Vola\nWebhook",
        "height": 240,
        "width": 1200,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -440,
        -540
      ],
      "typeVersion": 1,
      "id": "f9b74166-a332-4917-bef3-81624a8b7170",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "042d2591-94ed-43a9-a5e5-0860412c08e5",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -380,
        -460
      ],
      "id": "e4ae3df3-8ff3-453e-9d5e-139497cb711e",
      "name": "Vola Webhook",
      "webhookId": "042d2591-94ed-43a9-a5e5-0860412c08e5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1cedc1f8-0343-4fd7-ae02-c94ebfcacc69",
              "name": "chatInput",
              "value": "={{ $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "fbff52a0-dbd2-47a5-b933-27ead60f90fa",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -200,
        -460
      ],
      "id": "785de327-fc31-48ac-ae32-762863bc611b",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "tableName": "hotels_agent"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -40,
        -20
      ],
      "id": "467abe46-54ab-4598-a115-6e713756ad55",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "FPy2djSGyWu7XCgP",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -180,
        -20
      ],
      "id": "7496a4bd-c5cb-49f3-8176-e7d6e0793221",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "6crYZOqBsqTBxATq",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Scrape Google maps to get reviews",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/compass~crawler-google-places/run-sync-get-dataset-items",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "maxItems",
              "value": "5"
            },
            {
              "name": "limit",
              "value": "5"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"locationQuery\": \"{{ $fromAI('locationQuery', `Define location using free text. Simpler formats work best; e.g., use City + Country`, 'string', 'Sibiu') }}\",\n    \"maxCrawledPlacesPerSearch\": {{ $fromAI('maxCrawledPlacesPerSearch', `Maximum number of places to crawl per search`, 'number', 10) }},\n    \"language\": \"{{ $fromAI('language', `The language to search in (en, ro, us)`, 'string', 'ro') }}\",\n    \"maxReviews\": {{ $fromAI('maxReviews', `How many reviews should we want to have?`, 'number', 10) }},\n    \"reviewsSort\": \"newest\",\n    \"reviewsOrigin\": \"google\",\n    \"scrapeReviewsPersonalData\": false,\n    \"searchStringsArray\": [\"hotels\"],\n    \"city\": \"{{ $fromAI('city', 'The specific city name for location-based search', 'string') }}\",\n    \"scrapeImageAuthors\": false,\n    \"maxImages\": 5\n}",
        "options": {},
        "optimizeResponse": true,
        "fieldsToInclude": "selected",
        "fields": "hotelStars,hotelDescription,checkInDate,checkOutDate,similarHotelsNearby,hotelAds"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        220,
        160
      ],
      "id": "318005d6-1e9e-40a9-9450-3e601721340b",
      "name": "Scrape Google Maps",
      "retryOnFail": true,
      "alwaysOutputData": false,
      "credentials": {
        "apifyApi": {
          "id": "Dan6ZwpKbjUbYasi",
          "name": "Apify account"
        }
      },
      "onError": "continueRegularOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape AirBnb": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Booking": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reviews Booking": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reviews Airbnb": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Vola Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Google Maps": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Bucharest",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "dc37df28-37f2-42e8-ab00-1cf16b11b94d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "70494cb356420efc72c2a7a47e27b7a31b783bdae5a28ee35c1530986f0f1709"
  },
  "id": "OqwoBl6Q4dd4B9ap",
  "tags": [
    {
      "createdAt": "2025-08-03T20:43:00.329Z",
      "updatedAt": "2025-08-03T20:43:00.329Z",
      "id": "u7ONwpXh1eKMSVps",
      "name": "test"
    }
  ]
}